Index: SpotifyWrapper/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nDjango settings for SpotifyWrapper project.\n\nGenerated by 'django-admin startproject' using Django 5.1.2.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.1/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-56foi3ozk=_lx6v$^2bsk00r)n($-%ar@nm2@x8yy6idh%gm05'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'Api.apps.ApiConfig',\n    'tailwind',\n    'theme',\n    'sim',\n]\n\nTAILWIND_APP_NAME = 'theme'\n\nGOOGLE_TRANSLATE_API_KEY = \"AIzaSyBah0p1IvbEtMnSGAOwbM6iYd1UwBKPkmU\"\n\nINTERNAL_IPS = [\n    \"127.0.0.1\",\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'SpotifyWrapper.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'SpotifyWrapper.wsgi.application'\n\n\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\n#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'spotifywrapper2340@gmail.com'\nEMAIL_HOST_PASSWORD = 'vvsy zjjj drof ghng'  # or use environment variables for better security\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\n\nLOGIN_REDIRECT_URL = '/spotify/check-auth'\n\n\n\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / \"db.sqlite3\",  # Stores the SQLite database in the project directory\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SpotifyWrapper/settings.py b/SpotifyWrapper/settings.py
--- a/SpotifyWrapper/settings.py	(revision 58e6deedc8feab8df1db5215c453c7155814a936)
+++ b/SpotifyWrapper/settings.py	(date 1732821819095)
@@ -41,7 +41,6 @@
     'Api.apps.ApiConfig',
     'tailwind',
     'theme',
-    'sim',
 ]
 
 TAILWIND_APP_NAME = 'theme'
Index: Api/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\nfrom django.urls import path, include\nfrom django.contrib.auth import views as auth_views\n\nfrom Api import views\nfrom Api.views import spotify_redirect, CheckAuthentication, CurrentSong, Authentication, home, TopSongs, \\\n    SpotifyWrappedView, register, GameView, delete_account\n\n    SpotifyWrappedView, register, PostListView\nurlpatterns = [\n\n    path('', home, name='home'),\n    path('admin/', admin.site.urls),\n    path('redirect/', spotify_redirect, name='redirect'),\n    path('check-auth/', Authentication.as_view(), name='check-auth'),\n    path('current-song/', CurrentSong.as_view()),\n    path('top/', TopSongs.as_view()),\n    path('wrapped/', SpotifyWrappedView.as_view(), name = 'wrapped'),\n    path('game/', GameView.as_view(), name='game'),\n\n\n    path('register/',register, name='register'),\n    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),\n    path('logout/', auth_views.LogoutView.as_view(next_page='login'), name='logout'),\n    path('password_reset/', auth_views.PasswordResetView.as_view(template_name='password_reset.html'), name='password_reset'),\n    path('password_reset_done/', auth_views.PasswordResetDoneView.as_view(template_name='password_reset_done.html'), name='password_reset_done'),\n    path('password_reset_confirm/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(template_name='password_reset_confirm.html'), name='password_reset_confirm'),\n    path('password_reset_complete/', auth_views.PasswordResetCompleteView.as_view(template_name='password_reset_complete.html'), name='password_reset_complete'),\n    path('delete-account/', delete_account, name='delete_account'),\n\n    path('wrapped/intro/', views.SpotifyWrappedOverviewView.as_view(), name='wrapped_intro'),\n    path('wrapped/artists/', views.SpotifyWrappedArtistsView.as_view(), name='wrapped_artists'),\n    path('wrapped/tracks/', views.SpotifyWrappedTracksView.as_view(), name='wrapped_tracks'),\n    path('wrapped/albums/', views.SpotifyWrappedAlbumsView.as_view(), name='wrapped_albums'),\n    path('wrapped/profile/', views.SpotifyWrappedProfileView.as_view(), name='wrapped_profile'),\n    path('wrapped/response/', views.SpotifyWrappedGenAIView.as_view(), name='wrapped_response'),\n\n    path('wrapped/genres', views.TopGenresView.as_view(), name='wrapped_genres'),\n\n    path('wrapped/locations', views.TopLocationsView.as_view(), name='wrapped_locations'),\n\n    path('savedwraps/', views.savedwraps, name='savedwraps'),\n    path('wrap/<int:id>/', views.wrap_detail, name='wrap_detail'),  # Detailed view for each wrap\n    path('post-wrap/<int:wrap_id>/', views.post_wrap_to_website, name='post_wrap_to_website'),\n    #path('posts/', views.PostListView.as_view(), name='post_list'),\npath('posts/', views.PostListView.as_view(), name='post_list'),\n\n    path('savedwraps/artists/<int:id>/', views.saved_spotify_wrapped_artists, name='saved_spotify_wrapped_artists'),\n    path('savedwraps/tracks/<int:id>/', views.saved_spotify_wrapped_tracks, name='saved_spotify_wrapped_tracks'),\n    path('savedwraps/albums/<int:id>/', views.saved_spotify_wrapped_albums, name='saved_spotify_wrapped_albums'),\n    path('savedwraps/profile/<int:id>/', views.saved_spotify_wrapped_profile, name='saved_spotify_wrapped_profile'),\n\n    path('wrap/<int:id>/', views.wrap_detail, name='wrap_detail'),\n\n    path('delete_wrap/<int:id>/', views.delete_spotify_wrap, name='delete_spotify_wrap'),\n]\n# Detailed view for each wrap\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Api/urls.py b/Api/urls.py
--- a/Api/urls.py	(revision 58e6deedc8feab8df1db5215c453c7155814a936)
+++ b/Api/urls.py	(date 1732837386841)
@@ -4,9 +4,7 @@
 
 from Api import views
 from Api.views import spotify_redirect, CheckAuthentication, CurrentSong, Authentication, home, TopSongs, \
-    SpotifyWrappedView, register, GameView, delete_account
-
-    SpotifyWrappedView, register, PostListView
+    SpotifyWrappedView, register, GameView, delete_account, PostListView
 urlpatterns = [
 
     path('', home, name='home'),
@@ -53,5 +51,6 @@
     path('wrap/<int:id>/', views.wrap_detail, name='wrap_detail'),
 
     path('delete_wrap/<int:id>/', views.delete_spotify_wrap, name='delete_spotify_wrap'),
+    path('posted-wraps/', views.WebsiteSocial, name='post_list'),
 ]
 # Detailed view for each wrap
Index: Api/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#ADITHYAVERSION\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom rest_framework.response import Response\nfrom rest_framework.reverse import reverse_lazy\nfrom rest_framework.views import APIView\nfrom rest_framework import status\nfrom requests import Request, post\nfrom django.http import JsonResponse, Http404\nfrom .models import Token\nfrom .credentials import CLIENT_ID, CLIENT_SECRET, REDIRECT_URI, API_KEY\nfrom django.http import JsonResponse\nfrom .models import Token, Social\nfrom .credentials import CLIENT_ID, CLIENT_SECRET, REDIRECT_URI\nfrom .extras import create_or_update_tokens, is_spotify_authenticated, spotify_requests_execution\nfrom collections import Counter\nfrom datetime import datetime, timedelta\nimport sqlite3\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib import messages\nfrom rest_framework.permissions import IsAuthenticated\nfrom django.core.serializers.json import DjangoJSONEncoder\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom django.contrib.auth import logout\nimport urllib.parse\nfrom django.shortcuts import get_object_or_404, redirect\nfrom django.contrib import messages\nfrom rest_framework.views import APIView\nfrom .models import SpotifyWrapped, Social\nfrom django.views.generic import ListView\nfrom .models import Social\n#import google.generativeai as genai\nimport google.generativeai as genai\nimport os\nfrom django.shortcuts import render  # Assuming the function is in utils.py\n\nfrom django.shortcuts import render, redirect\n\n\ndef home(request):\n    if request.user.is_authenticated:\n        return redirect('spotify/check-auth')  # Replace 'dashboard' with your dashboard route name\n    else:\n        return redirect('login')  # Replace 'login' with your login route name\n\n\n\n\ndef register(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Account created successfully. Please log in.')\n            return redirect('login')\n    else:\n        form = UserCreationForm()\n    return render(request, 'register.html', {'form': form})\n\nclass Authentication(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request, format=None):\n        scopes = \"user-read-currently-playing user-read-playback-state user-modify-playback-state user-top-read user-library-read playlist-read-private user-read-recently-played user-read-private user-read-email\"\n        url = Request('GET', 'https://accounts.spotify.com/authorize', params={\n            'scope': scopes,\n            'response_type': 'code',\n            'redirect_uri': REDIRECT_URI,\n            'client_id': CLIENT_ID,\n        }).prepare().url\n        #return Response({\"url\": url}, status=status.HTTP_200_OK)\n        return render(request, 'auth.html', {\"url\": url})\n\n\n\n\n@login_required\ndef spotify_redirect(request):\n    code = request.GET.get('code')\n    error = request.GET.get('error')\n\n    if error:\n        return JsonResponse({\"error\": error}, status=status.HTTP_400_BAD_REQUEST)\n\n    response = post(\n    'https://accounts.spotify.com/api/token',\n    data={\n        'grant_type': 'authorization_code',\n        'code': code,\n        'redirect_uri': REDIRECT_URI,\n        'client_id': CLIENT_ID,\n        'client_secret': CLIENT_SECRET,\n    }).json()\n\n\n    print(\"Authorization Code:\", code)\n\n    if not request.session.exists(request.session.session_key):\n        request.session.create()\n        print('successful')\n\n    access_token = response.get('access_token')\n    refresh_token = response.get('refresh_token')\n    expires_in = response.get('expires_in', 3600)\n    token_type = response.get('token_type')\n    error = response.get('error')\n\n    create_or_update_tokens(\n        session_id=request.session.session_key,\n        access_token=access_token,\n        refresh_token=refresh_token,\n        expires_in=expires_in,\n        token_type=token_type,\n    )\n\n    # Return redirect URL as JSON, handle on frontend\n    redirect_url = f\"http://localhost:8000/spotify/wrapped/intro?code={code}\"\n    return redirect(redirect_url)\n\n\n@login_required\ndef delete_account(request):\n    if request.method == 'POST':\n        user = request.user\n        user.delete()\n        logout(request)\n        messages.success(request, 'Your account has been successfully deleted.')\n        return redirect('home')\n    return render(request, 'delete_account.html')\n\n\nclass CheckAuthentication(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request, format=None):\n        is_authenticated = is_spotify_authenticated(self.request.session.session_key)\n        return Response({\"is_authenticated\": is_authenticated}, status=status.HTTP_200_OK)\n\n\n\nclass CurrentSong(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request, format=None):\n        key = self.request.session.session_key\n        '''\n        try:\n            token = Token.objects.get(user=key)\n        except Token.DoesNotExist:\n            return Response({\"error\": \"Token not found\"}, status=status.HTTP_404_NOT_FOUND)\n'''\n        endpoint = \"me/player/currently-playing\"\n        response = spotify_requests_execution(key, endpoint)\n\n        if \"error\" in response or \"item\" not in response:\n            return Response({}, status=status.HTTP_204_NO_CONTENT)\n\n        item = response.get(\"item\")\n        progress = response.get(\"progress_ms\")\n        is_playing = response.get(\"is_playing\")\n        duration = item.get(\"duration_ms\")\n        song_id = item.get(\"id\")\n        title = item.get(\"name\")\n        album_cover = item.get(\"album\", {}).get(\"images\", [{}])[0].get(\"url\")\n        artists = \", \".join(artist.get(\"name\") for artist in item.get(\"artists\", []))\n\n        song = {\n            \"id\": song_id,\n            \"title\": title,\n            \"artists\": artists,\n            \"duration\": duration,\n            \"is_playing\": is_playing,\n            \"album_cover\": album_cover,\n            \"progress\": progress,\n        }\n\n        return Response(song, status=status.HTTP_200_OK)\n\nclass TopSongs(APIView):\n    def get(self, request, format=None):\n        key = self.request.session.session_key\n        target_playlists = [\n            \"Your Top Songs 2023\",\n            \"Your Top Songs 2022\",\n            \"Your Top Songs 2021\",\n            \"Your Top Songs 2020\",\n            \"Your Top Songs 2019\"\n        ]\n\n        endpoint = \"me/playlists/\"\n        playlists_response = spotify_requests_execution(key, endpoint)\n\n        if \"error\" in playlists_response:\n            return Response({\"error\": \"Failed to fetch playlists\"}, status=status.HTTP_400_BAD_REQUEST)\n\n        found_playlists = {}\n        for playlist in playlists_response.get(\"items\", []):\n            playlist_name = playlist.get(\"name\")\n            if playlist_name in target_playlists:\n                found_playlists[playlist_name] = playlist\n\n        playlists_by_year = {}\n\n        for playlist_name, playlist in found_playlists.items():\n            playlist_id = playlist.get(\"id\")\n            tracks_endpoint = f\"playlists/{playlist_id}/tracks/\"\n            tracks_response = spotify_requests_execution(key, tracks_endpoint)\n            items = tracks_response.get(\"items\", [])\n\n            tracks = []\n            for item in items:\n                track = item.get(\"track\")\n                if track:\n                    track_data = {\n                        \"id\": track.get(\"id\"),\n                        \"name\": track.get(\"name\"),\n                        \"artists\": \", \".join(artist.get(\"name\") for artist in track.get(\"artists\", [])),\n                        \"album\": track.get(\"album\", {}).get(\"name\"),\n                        \"album_cover\": track.get(\"album\", {}).get(\"images\", [{}])[0].get(\"url\"),\n                        \"duration_ms\": track.get(\"duration_ms\"),\n                        \"preview_url\": track.get(\"preview_url\"),  # Add preview URL for playback\n                        \"popularity\": track.get(\"popularity\"),\n                    }\n                    tracks.append(track_data)\n            playlists_by_year[playlist_name] = tracks\n\n        return render(request, 'dashboard.html', {\"playlists_by_year\": playlists_by_year})\nimport random\nclass GameView(APIView):\n   def get(self, request, format=None):\n       # Ensure we have a session\n       if not request.session.session_key:\n           request.session.create()\n\n\n       time_range = request.GET.get('time_range', 'medium_term')\n\n\n       # Validate time range\n       valid_ranges = ['short_term', 'medium_term', 'long_term']\n       if time_range not in valid_ranges:\n           time_range = 'medium_term'\n\n\n       # Fetch top tracks\n       key = request.session.session_key\n       top_tracks_endpoint = f\"me/top/tracks?time_range={time_range}&limit=50\"\n       top_tracks_response = spotify_requests_execution(key, top_tracks_endpoint)\n\n\n       # Prepare album data for the game\n       album_game_data = []\n       for track in top_tracks_response.get(\"items\", []):\n           album = track.get(\"album\", {})\n\n\n           # Ensure we have all required fields\n           if (album.get(\"name\") and\n                   album.get(\"artists\") and\n                   album.get(\"images\")):\n               album_entry = {\n                   \"album_name\": album[\"name\"],\n                   \"artist\": album[\"artists\"][0][\"name\"],\n                   \"image\": album[\"images\"][0][\"url\"],\n                   \"album_id\": album.get(\"id\", str(hash(album[\"name\"])))\n               }\n               album_game_data.append(album_entry)\n\n\n       # Shuffle the albums to randomize game\n       random.shuffle(album_game_data)\n\n\n       # Select first 10 albums for the game or fewer if not enough\n       selected_albums = album_game_data[:10]\n\n\n       # Prepare albums with blanked-out names\n       for album in selected_albums:\n           # Create a blanked-out version of the album name\n           words = album['album_name'].split()\n\n\n           # Choose a random word to blank out\n           blank_index = random.randint(0, len(words) - 1)\n           original_word = words[blank_index]\n\n\n           # Replace the chosen word with underscores\n           words[blank_index] = '_' * len(original_word)\n\n\n           # Store additional game information\n           album['blanked_name'] = ' '.join(words)\n           album['correct_word'] = original_word\n           album['word_index'] = blank_index\n\n\n       # Time range display names\n       time_range_display = {\n           'short_term': 'Last 4 Weeks',\n           'medium_term': 'Last 6 Months',\n           'long_term': 'All Time'\n       }\n\n\n       # Store game state in session\n       request.session['spotify_game_albums'] = selected_albums\n       request.session['spotify_game_session'] = {\n           \"current_round\": 0,\n           \"total_rounds\": len(selected_albums),\n           \"score\": 0\n       }\n       request.session.modified = True\n\n\n       # Structure the data for the frontend\n       trapped_data = {\n           \"currentTimeRange\": time_range,\n           \"timeRangeDisplay\": time_range_display[time_range],\n           \"availableTimeRanges\": [\n               {'value': tr, 'display': time_range_display[tr]}\n               for tr in valid_ranges\n           ],\n           \"gameData\": {\n               \"currentAlbum\": selected_albums[0],\n               \"allAlbums\": selected_albums,\n               \"gameSession\": {\n                   \"current_round\": 0,\n                   \"total_rounds\": len(selected_albums),\n                   \"score\": 0\n               }\n           }\n       }\n\n\n       # Return JSON for API consumption\n       if request.headers.get('Accept') == 'application/json':\n           return JsonResponse(trapped_data, encoder=DjangoJSONEncoder)\n\n\n       # Otherwise render the template\n       return render(request, \"album_guessing_game.html\", {\n           \"trapped_data\": trapped_data,\n           \"page_title\": f\"Spotify Album Guessing Game\",\n       })\n\n\n   def post(self, request, format=None):\n       # Retrieve game state from session\n       try:\n           albums = request.session.get('spotify_game_albums', [])\n           game_session = request.session.get('spotify_game_session', {})\n\n\n           if not albums or not game_session:\n               return JsonResponse({\"error\": \"Game session not found\"}, status=400)\n\n\n           # Get submitted answer\n           submitted_word = request.data.get('submittedWord', '').strip()\n\n\n           # Check if answer is correct\n           current_album = albums[game_session['current_round']]\n           is_correct = (\n                   submitted_word.lower() == current_album['correct_word'].lower()\n           )\n\n\n           # Update score\n           if is_correct:\n               game_session['score'] += 1\n\n\n           # Move to next round\n           game_session['current_round'] += 1\n\n\n           # Check if game is over\n           is_game_over = game_session['current_round'] >= game_session['total_rounds']\n\n\n           # Prepare response\n           response_data = {\n               \"isCorrect\": is_correct,\n               \"correctWord\": current_album['correct_word'],\n               \"score\": game_session['score'],\n               \"currentRound\": game_session['current_round'],\n               \"totalRounds\": game_session['total_rounds'],\n               \"isGameOver\": is_game_over\n           }\n\n\n           # If not game over, include next album\n           if not is_game_over:\n               response_data['nextAlbum'] = albums[game_session['current_round']]\n\n\n           # Update session\n           request.session['spotify_game_session'] = game_session\n           request.session.modified = True\n\n\n           return JsonResponse(response_data)\n\n\n       except Exception as e:\n           return JsonResponse({\"error\": str(e)}, status=500)\nclass SpotifyWrappedView(APIView):\n   def get(self, request, format=None):\n       key = self.request.session.session_key\n       # Configure the API key for the genai module\n       # Get time range from query parameters, default to medium_term\n       time_range = request.GET.get('time_range', 'medium_term')\n\n\n       # Validate time range\n       valid_ranges = ['short_term', 'medium_term', 'long_term']\n       if time_range not in valid_ranges:\n           time_range = 'medium_term'\n\n\n       # Fetch all necessary data from Spotify API with selected time range\n       # 1. Top Artists\n       top_artists_endpoint = f\"me/top/artists?time_range={time_range}&limit=50\"\n       top_artists_response = spotify_requests_execution(key, top_artists_endpoint)\n\n\n       # 2. Top Tracks\n       top_tracks_endpoint = f\"me/top/tracks?time_range={time_range}&limit=50\"\n       top_tracks_response = spotify_requests_execution(key, top_tracks_endpoint)\n\n\n       # 3. Recently played tracks (this endpoint doesn't use time_range)\n       recent_tracks_endpoint = \"me/player/recently-played?limit=50\"\n       recent_tracks_response = spotify_requests_execution(key, recent_tracks_endpoint)\n\n\n       # 4. Get user's playlists\n       playlists_endpoint = \"me/playlists\"\n       playlists_response = spotify_requests_execution(key, playlists_endpoint)\n\n       import google.generativeai as genai\n       # 5. Get user profile\n       profile_endpoint = \"me\"\n       profile_response = spotify_requests_execution(key, profile_endpoint)\n       # Extract top song names and their artists\n       genai.configure(api_key=API_KEY)\n       model = genai.GenerativeModel(\"gemini-1.5-flash\")\n       top_songs_and_artists = [\n           f\"{track['name']} by {', '.join(artist['name'] for artist in track['artists'])}\"\n           for track in top_tracks_response.get(\"items\", [])[:5]\n       ]\n       top_songs_and_artists_str = \"; \".join(top_songs_and_artists)\n\n\n\n\n       # Generate dynamic description based on top songs and artists\n       response = model.generate_content(\n           f\"Dynamically describe how someone who listens to my kind of music tends to act/think/dress. \"\n           f\"These are my top songs and artists: {top_songs_and_artists_str}. Limit the response to less than 100 words.\"\n       )\n       print(response)\n       # Process the data\n       all_artists = set()\n       for artist in top_artists_response.get(\"items\", []):\n           all_artists.add(artist[\"id\"])\n\n\n       for track in top_tracks_response.get(\"items\", []):\n           for artist in track[\"artists\"]:\n               all_artists.add(artist[\"id\"])\n\n\n       # Calculate new artists discovered\n       recent_artists = set()\n       for item in recent_tracks_response.get(\"items\", []):\n           for artist in item[\"track\"][\"artists\"]:\n               recent_artists.add(artist[\"id\"])\n\n\n       new_artists = recent_artists - all_artists\n\n\n       # Track-related metrics\n       all_tracks = set(track[\"id\"] for track in top_tracks_response.get(\"items\", []))\n\n\n       # Album-related metrics\n       all_albums = set(track[\"album\"][\"id\"] for track in top_tracks_response.get(\"items\", []))\n\n\n       # Location/Market metrics\n       all_markets = set()\n       for track in top_tracks_response.get(\"items\", []):\n           all_markets.update(track.get(\"available_markets\", []))\n\n\n       # Calculate listening time\n       total_listening_time = sum(\n           item[\"track\"][\"duration_ms\"]\n           for item in recent_tracks_response.get(\"items\", [])\n       )\n       listening_time_hours = round(total_listening_time / (1000 * 60 * 60), 2)\n\n\n       # Process top genres\n       genres = []\n       for artist in top_artists_response.get(\"items\", []):\n           genres.extend(artist.get(\"genres\", []))\n       top_genres = Counter(genres).most_common(5)\n\n\n       # Time range display names\n       time_range_display = {\n           'short_term': 'Last 4 Weeks',\n           'medium_term': 'Last 6 Months',\n           'long_term': 'All Time'\n       }\n\n\n       # Structure the data for the frontend\n       wrapped_data = {\n           \"response\": response,\n           # Time range information\n           \"currentTimeRange\": time_range,\n           \"timeRangeDisplay\": time_range_display[time_range],\n           \"availableTimeRanges\": [\n               {'value': tr, 'display': time_range_display[tr]}\n               for tr in valid_ranges\n           ],\n\n\n           # Total counts\n           \"totalArtists\": len(all_artists),\n           \"totalTracks\": len(all_tracks),\n           \"totalAlbums\": len(all_albums),\n           \"totalLocations\": len(all_markets),\n           \"newArtistsCount\": len(new_artists),\n\n\n           # Listening statistics\n           \"listeningTimeHours\": listening_time_hours,\n           \"topGenres\": [{\"name\": genre, \"count\": count} for genre, count in top_genres],\n\n\n           # Top Artists\n           \"topArtists\": [\n               {\n                   \"name\": artist[\"name\"],\n                   \"subtitle\": \", \".join(artist.get(\"genres\", [])[:2]),\n                   \"image\": artist[\"images\"][0][\"url\"] if artist.get(\"images\") else None,\n                   \"popularity\": artist.get(\"popularity\", 0),\n                   \"genres\": artist.get(\"genres\", []),\n                   \"spotifyUrl\": artist[\"external_urls\"][\"spotify\"]\n               }\n               for artist in top_artists_response.get(\"items\", [])[:5]\n           ],\n\n\n           # Top Tracks\n           \"topTracks\": [\n               {\n                   \"name\": track[\"name\"],\n                   \"subtitle\": \", \".join(artist[\"name\"] for artist in track[\"artists\"]),\n                   \"image\": track[\"album\"][\"images\"][0][\"url\"] if track[\"album\"].get(\"images\") else None,\n                   \"popularity\": track.get(\"popularity\", 0),\n                   \"previewUrl\": track.get(\"preview_url\"),\n                   \"spotifyUrl\": track[\"external_urls\"][\"spotify\"],\n                   \"albumName\": track[\"album\"][\"name\"],\n                   \"duration\": track[\"duration_ms\"]\n               }\n               for track in top_tracks_response.get(\"items\", [])[:5]\n           ],\n\n\n           # Top Albums (unchanged)\n           \"topAlbums\": [\n               {\n                   \"name\": track[\"album\"][\"name\"],\n                   \"subtitle\": track[\"album\"][\"artists\"][0][\"name\"],\n                   \"image\": track[\"album\"][\"images\"][0][\"url\"] if track[\"album\"].get(\"images\") else None,\n                   \"releaseDate\": track[\"album\"].get(\"release_date\"),\n                   \"totalTracks\": track[\"album\"].get(\"total_tracks\"),\n                   \"spotifyUrl\": track[\"album\"][\"external_urls\"][\"spotify\"]\n               }\n               for track in top_tracks_response.get(\"items\", [])[:5]\n           ],\n\n\n           # Top Locations\n           \"topLocations\": [\n               {\n                   \"name\": market,\n                   \"count\": len([\n                       track for track in top_tracks_response.get(\"items\", [])\n                       if market in track.get(\"available_markets\", [])\n                   ])\n               }\n               for market in list(all_markets)[:5]\n           ],\n\n\n           # User Profile\n           \"userProfile\": {\n               \"name\": profile_response.get(\"display_name\"),\n               \"image\": profile_response.get(\"images\", [{}])[0].get(\"url\") if profile_response.get(\"images\") else None,\n               \"country\": profile_response.get(\"country\"),\n               \"product\": profile_response.get(\"product\"),\n               \"followersCount\": profile_response.get(\"followers\", {}).get(\"total\", 0)\n           }\n\n\n       }\n\n\n       wrapped_data['sharing'] = self.generate_sharing_data(wrapped_data, request)\n\n\n       # Return JSON for API consumption\n       if request.headers.get('Accept') == 'application/json':\n           return JsonResponse(wrapped_data, encoder=DjangoJSONEncoder)\n\n\n       # Otherwise render the template\n       return render(request, \"wrapped.html\", {\n           \"wrapped_data\": wrapped_data,\n           \"page_title\": f\"Your Spotify Wrapped - {time_range_display[time_range]}\",\n           \"current_year\": datetime.now().year,\n           \"request\": request  # Pass request to template for building absolute URLs\n       })\n\n\n   def generate_sharing_data(self, wrapped_data, request):\n       \"\"\"Generate sharing text and URLs for social media platforms\"\"\"\n\n\n       # Base sharing text\n       share_text = (\n           f\"\uD83C\uDFB5 My Spotify Wrapped Stats:\\n\"\n           f\"• {wrapped_data['listeningTimeHours']} hours of music\\n\"\n           f\"• Top Artist: {wrapped_data['topArtists'][0]['name']}\\n\"\n           f\"• Top Track: {wrapped_data['topTracks'][0]['name']}\\n\"\n           f\"• {wrapped_data['totalArtists']} different artists\\n\"\n           f\"#SpotifyWrapped\"\n       )\n\n\n       # Get the current page's URL\n       current_url = request.build_absolute_uri()\n\n\n       # Generate platform-specific sharing URLs\n       sharing_data = {\n           'twitter': {\n               'url': f\"https://twitter.com/intent/tweet?text={urllib.parse.quote(share_text)}&url={urllib.parse.quote(current_url)}\"\n           },\n           'linkedin': {\n               'url': f\"https://www.linkedin.com/sharing/share-offsite/?url={urllib.parse.quote(current_url)}\"\n           },\n           'instagram': {\n               'text': share_text,  # For copying to clipboard since Instagram doesn't have a direct sharing API\n               'url': current_url\n           }\n       }\n       print(sharing_data)\n       return sharing_data\n\n    \n\nfrom django.shortcuts import render\nfrom django.shortcuts import render, redirect\nfrom .models import SpotifyWrapped\n\nfrom django.shortcuts import render\nfrom .models import SpotifyWrapped\n\ndef savedwraps(request):\n    # Fetch all saved SpotifyWrapped data for the logged-in user\n    wraps = SpotifyWrapped.objects.filter(user=request.user).order_by('-created_at')\n\n    # Structure the data to pass into the template\n    context = {\n        'wraps': wraps,\n        'page_title': 'Your Saved Spotify Wrapped'\n    }\n\n    return render(request, \"savedwraps.html\", context)\n\ndef wrap_detail(request, id):\n    # Get the SpotifyWrapped entry based on the provided id\n    wrap = get_object_or_404(SpotifyWrapped, id=id)\n\n    # Create context with the data for the selected wrap\n    context = {\n        'wrap': wrap,\n        'page_title': f\"Details for {wrap.time_range.capitalize()} Wrapped\"\n    }\n\n    # Render the 'wrap_detail.html' template with the context\n    return render(request, \"wrap_detail.html\", context)\n\nclass SpotifyWrappedOverviewView(APIView):\n    def get(self, request, format=None):\n        key = self.request.session.session_key\n        time_range = request.GET.get('time_range', 'medium_term')\n        valid_ranges = ['short_term', 'medium_term', 'long_term']\n        time_range_display = {'short_term': 'Last 4 Weeks', 'medium_term': 'Last 6 Months', 'long_term': 'All Time'}\n\n        if time_range not in valid_ranges:\n            time_range = 'medium_term'\n\n        # Fetch general stats from the session or cached endpoints\n        top_artists_endpoint = f\"me/top/artists?time_range={time_range}&limit=50\"\n        top_tracks_endpoint = f\"me/top/tracks?time_range={time_range}&limit=50\"\n        top_artists_response = spotify_requests_execution(key, top_artists_endpoint)\n        top_tracks_response = spotify_requests_execution(key, top_tracks_endpoint)\n\n        all_artists = {artist[\"id\"] for artist in top_artists_response.get(\"items\", [])}\n        all_tracks = {track[\"id\"] for track in top_tracks_response.get(\"items\", [])}\n        all_albums = {track[\"album\"][\"id\"] for track in top_tracks_response.get(\"items\", [])}\n\n        genres = []\n        for artist in top_artists_response.get(\"items\", []):\n            genres.extend(artist.get(\"genres\", []))\n        top_genres = Counter(genres).most_common(5)\n\n        wrapped_data = {\n            \"currentTimeRange\": time_range,\n            \"timeRangeDisplay\": time_range_display[time_range],\n            \"availableTimeRanges\": [{'value': tr, 'display': time_range_display[tr]} for tr in valid_ranges],\n            \"totalArtists\": len(all_artists),\n            \"totalTracks\": len(all_tracks),\n            \"totalAlbums\": len(all_albums),\n            \"topGenres\": [{\"name\": genre, \"count\": count} for genre, count in top_genres],\n        }\n\n        wraps = SpotifyWrapped.objects.filter(user=request.user).order_by('-created_at')\n\n        return render(request, \"wrapped_overview.html\", {\"wrapped_data\": wrapped_data, \"wraps\": wraps, \"time_range\" : time_range, \"page_title\": \"Your Spotify Wrapped Overview\"})\n\n\nimport logging\nfrom django.shortcuts import render\nfrom rest_framework.views import APIView\n\nlogger = logging.getLogger(__name__)\nclass SpotifyWrappedGenAIView(APIView):\n    def get(self, request, format=None):\n        # Get the session key for the request\n        key = self.request.session.session_key\n\n        # Get time range from query parameters, default to medium_term\n        time_range = request.GET.get('time_range', 'medium_term')\n\n        # Validate time range\n        valid_ranges = ['short_term', 'medium_term', 'long_term']\n        if time_range not in valid_ranges:\n            logger.warning(f\"Invalid time range: {time_range}. Defaulting to 'medium_term'.\")\n            time_range = 'medium_term'\n\n        try:\n            # Fetch top tracks data from Spotify API\n            top_tracks_endpoint = f\"me/top/tracks?time_range={time_range}&limit=50\"\n            top_tracks_response = spotify_requests_execution(key, top_tracks_endpoint)\n\n            # Extract top song names and their artists\n            top_songs_and_artists = [\n                f\"{track['name']} by {', '.join(artist['name'] for artist in track['artists'])}\"\n                for track in top_tracks_response.get(\"items\", [])[:5]\n            ]\n            top_songs_and_artists_str = \"; \".join(top_songs_and_artists)\n\n            # Configure GenAI\n            import google.generativeai as genai\n            genai.configure(api_key=API_KEY)\n            model = genai.GenerativeModel(\"gemini-1.5-flash\")\n\n            # Generate dynamic description based on top songs and artists\n            response = model.generate_content(\n                f\"Dynamically describe how someone who listens to my kind of music tends to act/think/dress. \"\n                f\"These are my top songs and artists: {top_songs_and_artists_str}. Limit the response to less than 100 words.\"\n            )\n\n            # Process the GenAI response\n            wrapped_data = {\n                \"genaiResponse\": response.text,\n                \"topSongsAndArtists\": top_songs_and_artists\n            }\n\n            logger.info(f\"Successfully generated GenAI response for top tracks\")\n\n        except Exception as e:\n            logger.error(f\"Error generating GenAI response: {str(e)}\")\n            wrapped_data = {\n                \"genaiResponse\": \"Unable to generate description.\",\n                \"topSongsAndArtists\": []\n            }\n\n        # Render the template with the data\n        return render(request, \"wrapped_genai.html\", {\n            \"wrapped_data\": wrapped_data,\n            \"page_title\": \"Your Music Personality\",\n            \"time_range\": time_range\n        })\n\n\nclass SpotifyWrappedArtistsView(APIView):\n    def get(self, request, format=None):\n        # Get the session key for the request\n        key = self.request.session.session_key\n\n        # Get time range from query parameters, default to medium_term\n        time_range = request.GET.get('time_range', 'medium_term')\n\n        # Validate time range\n        valid_ranges = ['short_term', 'medium_term', 'long_term']\n        if time_range not in valid_ranges:\n            logger.warning(f\"Invalid time range: {time_range}. Defaulting to 'medium_term'.\")\n            time_range = 'medium_term'\n\n        # Fetch top artists data from Spotify API\n        top_artists_endpoint = f\"me/top/artists?time_range={time_range}&limit=50\"\n\n        try:\n            # Call the function that interacts with the Spotify API\n            top_artists_response = spotify_requests_execution(key, top_artists_endpoint)\n            logger.info(f\"Fetched top artists for time range: {time_range}\")\n\n            # Process top artists data\n            wrapped_data = {\n                \"topArtists\": [\n                    {\n                        \"name\": artist[\"name\"],\n                        \"subtitle\": \", \".join(artist.get(\"genres\", [])[:2]),  # Displaying up to 2 genres\n                        \"image\": artist[\"images\"][0][\"url\"] if artist.get(\"images\") else None,\n                        \"popularity\": artist.get(\"popularity\", 0),\n                        \"spotifyUrl\": artist[\"external_urls\"][\"spotify\"]\n                    }\n                    for artist in top_artists_response.get(\"items\", [])[:5]  # Limit to top 5 artists\n                ]\n            }\n\n        except Exception as e:\n            logger.error(f\"Error fetching top artists: {str(e)}\")\n            wrapped_data = {\"topArtists\": []}\n\n        # Render the template with the data\n        return render(request, \"wrapped_artists.html\", {\n            \"wrapped_data\": wrapped_data,\n            \"page_title\": \"Your Top Artists\",\n            \"time_range\": time_range  # Ensure time range is passed to the template\n        })\n\n\nclass SpotifyWrappedTracksView(APIView):\n    def get(self, request, format=None):\n        key = self.request.session.session_key\n        time_range = request.GET.get('time_range', 'medium_term')\n\n        top_tracks_endpoint = f\"me/top/tracks?time_range={time_range}&limit=50\"\n        top_tracks_response = spotify_requests_execution(key, top_tracks_endpoint)\n\n        wrapped_data = {\n            \"topTracks\": [\n                {\n                    \"name\": track[\"name\"],\n                    \"subtitle\": \", \".join(artist[\"name\"] for artist in track[\"artists\"]),\n                    \"image\": track[\"album\"][\"images\"][0][\"url\"] if track[\"album\"].get(\"images\") else None,\n                    \"albumName\": track[\"album\"][\"name\"],\n                    \"spotifyUrl\": track[\"external_urls\"][\"spotify\"],\n                    \"preview_url\": track[\"preview_url\"],  # Include preview URL\n                }\n                for track in top_tracks_response.get(\"items\", [])[:5]\n            ]\n        }\n\n        return render(request, \"wrapped_tracks.html\", {\"wrapped_data\": wrapped_data, 'time_range': time_range, \"page_title\": \"Your Top Tracks\"})\n\nclass SpotifyWrappedAlbumsView(APIView):\n    def get(self, request, format=None):\n        key = self.request.session.session_key\n        time_range = request.GET.get('time_range', 'medium_term')\n\n        top_tracks_endpoint = f\"me/top/tracks?time_range={time_range}&limit=50\"\n        top_tracks_response = spotify_requests_execution(key, top_tracks_endpoint)\n\n        wrapped_data = {\n            \"topAlbums\": [\n                {\n                    \"name\": track[\"album\"][\"name\"],\n                    \"subtitle\": track[\"album\"][\"artists\"][0][\"name\"],\n                    \"image\": track[\"album\"][\"images\"][0][\"url\"] if track[\"album\"].get(\"images\") else None,\n                    \"spotifyUrl\": track[\"album\"][\"external_urls\"][\"spotify\"]\n                }\n                for track in top_tracks_response.get(\"items\", [])[:5]\n            ]\n        }\n\n        return render(request, \"wrapped_albums_locations.html\", {\"wrapped_data\": wrapped_data, 'time_range': time_range, \"page_title\": \"Your Top Albums\"})\n\n\n\nfrom collections import Counter\nfrom django.shortcuts import render\nfrom rest_framework.views import APIView # Assuming spotify_requests_execution is a utility function\n\nclass SpotifyWrappedProfileView(APIView):\n    def get(self, request, *args, **kwargs):\n        key = self.request.session.session_key\n        time_range = request.GET.get('time_range', 'medium_term')\n\n        # Configure the API key for the genai module\n        # Get time range from query parameters, default to medium_ter\n\n        # Validate time range\n        valid_ranges = ['short_term', 'medium_term', 'long_term']\n        if time_range not in valid_ranges:\n            time_range = 'medium_term'\n\n        # Fetch all necessary data from Spotify API with selected time range\n        # 1. Top Artists\n        top_artists_endpoint = f\"me/top/artists?time_range={time_range}&limit=50\"\n        top_artists_response = spotify_requests_execution(key, top_artists_endpoint)\n\n        # 2. Top Tracks\n        top_tracks_endpoint = f\"me/top/tracks?time_range={time_range}&limit=50\"\n        top_tracks_response = spotify_requests_execution(key, top_tracks_endpoint)\n\n        # 3. Recently played tracks (this endpoint doesn't use time_range)\n        recent_tracks_endpoint = \"me/player/recently-played?limit=50\"\n        recent_tracks_response = spotify_requests_execution(key, recent_tracks_endpoint)\n\n        # 4. Get user's playlists\n        playlists_endpoint = \"me/playlists\"\n        playlists_response = spotify_requests_execution(key, playlists_endpoint)\n\n        # 5. Get user profile\n        profile_endpoint = \"me\"\n        profile_response = spotify_requests_execution(key, profile_endpoint)\n        # Extract top song names and their artists\n        '''model = genai.GenerativeModel(\"gemini-1.5-flash\")\n        top_songs_and_artists = [\n            f\"{track['name']} by {', '.join(artist['name'] for artist in track['artists'])}\"\n            for track in top_tracks_response.get(\"items\", [])[:5]\n        ]\n        top_songs_and_artists_str = \"; \".join(top_songs_and_artists)\n\n        # Generate dynamic description based on top songs and artists\n        response = model.generate_content(\n            f\"Dynamically describe how someone who listens to my kind of music tends to act/think/dress. \"\n            f\"These are my top songs and artists: {top_songs_and_artists_str}.\"\n        )'''\n        # Process the data\n        all_artists = set()\n        for artist in top_artists_response.get(\"items\", []):\n            all_artists.add(artist[\"id\"])\n\n        for track in top_tracks_response.get(\"items\", []):\n            for artist in track[\"artists\"]:\n                all_artists.add(artist[\"id\"])\n\n        # Calculate new artists discovered\n        recent_artists = set()\n        for item in recent_tracks_response.get(\"items\", []):\n            for artist in item[\"track\"][\"artists\"]:\n                recent_artists.add(artist[\"id\"])\n\n        new_artists = recent_artists - all_artists\n\n        # Track-related metrics\n        all_tracks = set(track[\"id\"] for track in top_tracks_response.get(\"items\", []))\n\n        # Album-related metrics\n        all_albums = set(track[\"album\"][\"id\"] for track in top_tracks_response.get(\"items\", []))\n\n        # Location/Market metrics\n        all_markets = set()\n        for track in top_tracks_response.get(\"items\", []):\n            all_markets.update(track.get(\"available_markets\", []))\n\n        # Calculate listening time\n        total_listening_time = sum(\n            item[\"track\"][\"duration_ms\"]\n            for item in recent_tracks_response.get(\"items\", [])\n        )\n        listening_time_hours = round(total_listening_time / (1000 * 60 * 60), 2)\n\n        # Process top genres\n        genres = []\n        for artist in top_artists_response.get(\"items\", []):\n            genres.extend(artist.get(\"genres\", []))\n        top_genres = Counter(genres).most_common(5)\n\n        # Time range display names\n        time_range_display = {\n            'short_term': 'Last 4 Weeks',\n            'medium_term': 'Last 6 Months',\n            'long_term': 'All Time'\n        }\n\n        # Structure the data for the frontend\n        wrapped_data = {\n            # Time range information\n            \"currentTimeRange\": time_range,\n            \"timeRangeDisplay\": time_range_display[time_range],\n            \"availableTimeRanges\": [\n                {'value': tr, 'display': time_range_display[tr]}\n                for tr in valid_ranges\n            ],\n\n            # Total counts\n            \"totalArtists\": len(all_artists),\n            \"totalTracks\": len(all_tracks),\n            \"totalAlbums\": len(all_albums),\n            \"totalLocations\": len(all_markets),\n            \"newArtistsCount\": len(new_artists),\n\n            # Listening statistics\n            \"listeningTimeHours\": listening_time_hours,\n            \"topGenres\": [{\"name\": genre, \"count\": count} for genre, count in top_genres],\n        }\n\n        # Time range display names\n\n        time_range_display = {\n            'short_term': 'Last 4 Weeks',\n            'medium_term': 'Last 6 Months',\n            'long_term': 'All Time'\n        }\n        return render(request, \"wrapped_profile.html\",{\"wrapped_data\": wrapped_data, 'time_range': time_range, \"page_title\": \"Your Spotify Profile\"})\n\n\nfrom django.shortcuts import render\nfrom django.http import JsonResponse\nimport requests\n\nclass TopLocationsView(APIView):\n    def get(self, request, format=None):\n        key = self.request.session.session_key\n        time_range = request.GET.get('time_range', 'medium_term')\n\n        valid_ranges = ['short_term', 'medium_term', 'long_term']\n        if time_range not in valid_ranges:\n            time_range = 'medium_term'\n\n        # Fetch Top Tracks data directly\n        top_tracks_endpoint = f\"https://api.spotify.com/v1/me/top/tracks?time_range={time_range}&limit=50\"\n        headers = {'Authorization': f'Bearer {key}'}\n        top_tracks_response = requests.get(top_tracks_endpoint, headers=headers).json()\n\n        # Process top locations (markets)\n        all_markets = set()\n        for track in top_tracks_response.get(\"items\", []):\n            all_markets.update(track.get(\"available_markets\", []))\n\n        # Get the top locations (markets)\n        top_locations = [\n            {\n                \"name\": market,\n                \"count\": len([track for track in top_tracks_response.get(\"items\", []) if market in track.get(\"available_markets\", [])])\n            }\n            for market in list(all_markets)[:5]\n        ]\n\n        # Log data for debugging\n        print(\"Wrapped Data:\", {\n            \"timeRangeDisplay\": {'short_term': 'Last 4 Weeks', 'medium_term': 'Last 6 Months', 'long_term': 'All Time'}[time_range],\n            \"topLocations\": top_locations\n        })\n\n        # Structure the data for the frontend\n        wrapped_data = {\n            \"timeRangeDisplay\": {'short_term': 'Last 4 Weeks', 'medium_term': 'Last 6 Months', 'long_term': 'All Time'}[time_range],\n            \"topLocations\": top_locations\n        }\n\n        # Return JSON or render template\n        if request.headers.get('Accept') == 'application/json':\n            return JsonResponse(wrapped_data)\n\n        return render(request, \"top_locations.html\", {\"wrapped_data\": wrapped_data})\n\n\nclass TopGenresView(APIView):\n    def get(self, request, format=None):\n        key = self.request.session.session_key\n        time_range = request.GET.get('time_range', 'medium_term')\n\n        valid_ranges = ['short_term', 'medium_term', 'long_term']\n        if time_range not in valid_ranges:\n            time_range = 'medium_term'\n\n        # Fetch Top Artists data\n        top_artists_endpoint = f\"me/top/artists?time_range={time_range}&limit=50\"\n        top_artists_response = spotify_requests_execution(key, top_artists_endpoint)\n\n        # Process top genres\n        genres = []\n        for artist in top_artists_response.get(\"items\", []):\n            genres.extend(artist.get(\"genres\", []))\n        top_genres = Counter(genres).most_common(5)\n\n        # Structure the data for the frontend\n        wrapped_data = {\n            \"timeRangeDisplay\": {'short_term': 'Last 4 Weeks', 'medium_term': 'Last 6 Months', 'long_term': 'All Time'}[\n                time_range],\n            \"topGenres\": [{\"name\": genre, \"count\": count} for genre, count in top_genres]\n        }\n\n        # Return JSON or render template\n        if request.headers.get('Accept') == 'application/json':\n            return JsonResponse(wrapped_data)\n\n        return render(request, \"top_genres.html\", {\"wrapped_data\": wrapped_data})\n\n\nprint(\"dablt\")\n\n# Connect to the SQLite database\nconn = sqlite3.connect('db.sqlite3')  # Replace with the correct path if needed\ncursor = conn.cursor()\n\n# Get the list of all table names in the database\ncursor.execute(\"SELECT name FROM sqlite_master WHERE type='table';\")\ntables = cursor.fetchall()\n\n# Iterate through each table and display its contents\nfor table in tables:\n    table_name = table[0]\n    print(f\"Displaying data from table: {table_name}\")\n\n    try:\n        # Query to select everything from the current table\n        cursor.execute(f\"SELECT * FROM {table_name}\")\n\n        # Fetch all rows from the table\n        rows = cursor.fetchall()\n\n        # If the table is empty, print a message\n        if not rows:\n            print(f\"Table {table_name} is empty.\")\n        else:\n            # Print each row in the table\n            for row in rows:\n                print(row)\n\n    except sqlite3.Error as e:\n        # Handle the case where a table can't be queried\n        print(f\"Error querying table {table_name}: {e}\")\n\n    print(\"\\n\" + \"-\" * 50 + \"\\n\")\n\n\nclass PostListView(ListView):\n    model = Social\n    template_name = 'post_list.html'\n    context_object_name = 'post_list'\n    ordering = ['-created_on']\n\n\ndef post_wrap_to_website(request, wrap_id):\n    # Get the SpotifyWrapped object for the current user\n    wrap = get_object_or_404(SpotifyWrapped, id=wrap_id, user=request.user)\n\n    # Copy the data to a new Post object\n    Social.objects.create(\n        user=request.user,\n        time_range=wrap.time_range,\n        total_artists=wrap.total_artists,\n        total_tracks=wrap.total_tracks,\n        total_albums=wrap.total_albums,\n        total_locations=wrap.total_locations,\n        new_artists_count=wrap.new_artists_count,\n        listening_time_hours=wrap.listening_time_hours,\n        top_genres=wrap.top_genres,\n        top_artists=wrap.top_artists,\n        top_tracks=wrap.top_tracks,\n        top_albums=wrap.top_albums,\n        top_locations=wrap.top_locations,\n        user_profile=wrap.user_profile,\n    )\n\n    # Add a success message and redirect to the posts page\n    messages.success(request, \"Your Spotify Wrapped data has been posted!\")\n    socials_list = Social.objects.all()\n    context = {\n        'socials_list': socials_list,  # Pass the list to the template\n    }\n    return render(request, 'post_list.html', context)  # Ensure 'post_list' matches the URL name for your posts page\n# Close the connection when done\nconn.close()\n\n\ndef saved_spotify_wrapped_artists(request, id):\n    user = request.user\n\n    # Get the specific wrap by id\n    wrap = get_object_or_404(SpotifyWrapped, id=id, user=user)\n\n    # Render the wrapped_profile.html template with the wrap context\n    return render(request, \"saved_artists.html\", {\n        \"wrap\": wrap,\n        \"page_title\": \"Your Saved Spotify Profile\",\n    })\n\n\n\ndef saved_spotify_wrapped_tracks(request, id):\n    user = request.user\n\n    # Get the specific wrap by id\n    wrap = get_object_or_404(SpotifyWrapped, id=id, user=user)\n\n    # Render the wrapped_profile.html template with the wrap context\n    return render(request, \"saved_tracks.html\", {\n        \"wrap\": wrap,\n        \"page_title\": \"Your Saved Spotify Profile\",\n    })\n\n\ndef saved_spotify_wrapped_albums(request, id):\n    user = request.user\n\n    # Get the specific wrap by id\n    wrap = get_object_or_404(SpotifyWrapped, id=id, user=user)\n\n    # Render the wrapped_profile.html template with the wrap context\n    return render(request, \"saved_albums.html\", {\n        \"wrap\": wrap,\n        \"page_title\": \"Your Saved Spotify Profile\",\n    })\n\n\ndef saved_spotify_wrapped_profile(request, id):\n    user = request.user\n\n    # Get the specific wrap by id\n    wrap = get_object_or_404(SpotifyWrapped, id=id, user=user)\n\n    # Render the wrapped_profile.html template with the wrap context\n    return render(request, \"saved_profile.html\", {\n        \"wrap\": wrap,\n        \"page_title\": \"Your Saved Spotify Profile\",\n    })\n\n\ndef delete_spotify_wrap(request, id):\n    try:\n        wrap = SpotifyWrapped.objects.get(id=id, user=request.user)\n    except SpotifyWrapped.DoesNotExist:\n        raise Http404(\"Spotify Wrapped data not found.\")\n\n        # Delete the wrap\n    wrap.delete()\n\n    # Redirect back to the list of wraps\n    return redirect('wrapped_intro')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Api/views.py b/Api/views.py
--- a/Api/views.py	(revision 58e6deedc8feab8df1db5215c453c7155814a936)
+++ b/Api/views.py	(date 1732837189947)
@@ -445,7 +445,7 @@
        profile_endpoint = "me"
        profile_response = spotify_requests_execution(key, profile_endpoint)
        # Extract top song names and their artists
-       genai.configure(api_key=API_KEY)
+       genai.configure(api_key="AIzaSyDb3xC6xxLgmjEvgqq5dXhJ5MIfvZgsMdc")
        model = genai.GenerativeModel("gemini-1.5-flash")
        top_songs_and_artists = [
            f"{track['name']} by {', '.join(artist['name'] for artist in track['artists'])}"
@@ -617,6 +617,25 @@
 
        wrapped_data['sharing'] = self.generate_sharing_data(wrapped_data, request)
 
+       if request.user.is_authenticated:
+           # Save the data to the database
+           SpotifyWrapped.objects.create(
+               user=request.user,
+               time_range=wrapped_data["currentTimeRange"],
+               total_artists=wrapped_data["totalArtists"],
+               total_tracks=wrapped_data["totalTracks"],
+               total_albums=wrapped_data["totalAlbums"],
+               total_locations=wrapped_data["totalLocations"],
+               new_artists_count=wrapped_data["newArtistsCount"],
+               listening_time_hours=wrapped_data["listeningTimeHours"],
+               top_genres=wrapped_data["topGenres"],
+               top_artists=wrapped_data["topArtists"],
+               top_tracks=wrapped_data["topTracks"],
+               top_albums=wrapped_data["topAlbums"],
+               top_locations=wrapped_data["topLocations"],
+               user_profile=wrapped_data["userProfile"]
+           )
+
 
        # Return JSON for API consumption
        if request.headers.get('Accept') == 'application/json':
@@ -1245,7 +1264,12 @@
         "page_title": "Your Saved Spotify Profile",
     })
 
-
+def WebsiteSocial(request):
+    socials_list = Social.objects.all()
+    context = {
+        'socials_list': socials_list,  # Pass the list to the template
+    }
+    return render(request, 'post_list.html', context)  # Ensure 'post_list' matches the URL name for your posts page
 def delete_spotify_wrap(request, id):
     try:
         wrap = SpotifyWrapped.objects.get(id=id, user=request.user)
Index: Api/templates/base.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"google\" content=\"notranslate\"> <!-- Prevent translation of the entire page -->\n    <title>{% block title %}My Music App{% endblock %}</title>\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n    \n    <style>\n        /* Google Translate dropdown styling */\n        .goog-te-combo {\n            max-width: 150px;\n            font-size: 14px;\n        }\n        #google_translate_element {\n            position: relative;\n            display: inline-block;\n            max-height: 50px;\n            overflow: hidden;\n        }\n\n        /* Hide Google Translate banner */\n        .goog-te-banner-frame {\n            display: none !important;\n        }\n\n        /* Navbar styling */\n        nav {\n            background-color: #333 !important;\n            color: #fff !important;\n            display: flex !important;\n            justify-content: space-between !important;\n            align-items: center !important;\n            padding: 1rem 2rem !important; /* Ensure consistent padding */\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1) !important;\n            position: relative !important;\n            height: 60px !important; /* Set the height explicitly */\n        }\n\n        /* Navbar link styling */\n        nav a {\n            color: #fff !important;\n            text-decoration: none !important;\n            font-weight: bold !important;\n            margin-right: 2rem !important;\n            padding: 10px 20px !important;\n            border-radius: 30px !important;\n            font-size: 1rem !important;\n            transition: background-color 0.3s, transform 0.3s !important;\n        }\n\n        nav a:hover {\n            background-color: #555 !important;\n            transform: scale(1.05) !important;\n        }\n\n        /* Navbar button styling */\n        nav button {\n            color: #fff !important;\n            padding: 10px 20px !important;\n            border-radius: 30px !important;\n            font-size: 1rem !important;\n            cursor: pointer !important;\n            transition: background-color 0.3s, transform 0.3s !important;\n            border: none !important;\n        }\n\n        /* Green button for login */\n        nav .btn-primary {\n            background-color: #1db954 !important;\n        }\n\n        nav .btn-primary:hover {\n            background-color: #1aa13f !important;\n        }\n\n        /* Red button for logout */\n        nav .btn-secondary {\n            background-color: #dc3545 !important;\n        }\n\n        nav .btn-secondary:hover {\n            background-color: #c82333 !important;\n        }\n\n        /* Button for theme toggle */\n        .btn-toggle {\n            background-color: #444 !important;\n        }\n\n        .btn-toggle:hover {\n            background-color: #555 !important;\n        }\n\n        /* Ensure buttons are aligned to the right */\n        .nav-right {\n            display: flex !important;\n            align-items: center !important;\n            gap: 1rem !important; /* Space between buttons */\n            margin-left: auto !important; /* Pushes these elements to the far right */\n        }\n        \n        /* Red button for delete account */\n        nav .btn-danger {\n            background-color: #dc3545 !important;\n        }\n        \n        nav .btn-danger:hover {\n            background-color: #c82333 !important;\n        }\n        \n        /* Add padding to the content container to prevent clipping */\n    </style>\n</head>\n<body class=\"light-theme\">\n    <nav>\n        <div class=\"nav-links\">\n            <a href=\"{% url 'home' %}\">Home</a>\n             <a href=\"{% url 'game' %}\" class=\"game-link\">Album Guessing Game</a>\n            <!-- Google Translate widget -->\n            <div id=\"google_translate_element\"></div>\n        </div>\n\n        <div class=\"nav-right\">\n            {% if user.is_authenticated %}\n                <!-- Logout button aligned to the right -->\n                <form action=\"{% url 'logout' %}\" method=\"post\" style=\"display: inline;\">\n                    {% csrf_token %}\n                    <button type=\"submit\" class=\"btn btn-secondary\">Log out</button>\n                </form>\n                \n                <!-- Add delete account button -->\n                <a href=\"{% url 'delete_account' %}\" class=\"btn btn-danger\">Delete Account</a>\n            {% else %}\n                <!-- Login button aligned to the right -->\n                <a href=\"{% url 'login' %}\" class=\"btn btn-primary\">Log in</a>\n            {% endif %}\n        \n            <!-- Theme toggle button -->\n            <button id=\"theme-toggle\" class=\"btn btn-toggle\">Change Theme</button>\n        </div>\n    </nav>\n\n    <div class=\"content\">\n        {% block content %}\n        {% endblock %}\n    </div>\n\n    <script type=\"text/javascript\">\n        function googleTranslateElementInit() {\n            new google.translate.TranslateElement(\n                {\n                    pageLanguage: 'en',\n                    includedLanguages: 'en,es,zh-CN,hi,ta,te',\n                    layout: google.translate.TranslateElement.InlineLayout.SIMPLE\n                },\n                'google_translate_element'\n            );\n        }\n    </script>\n\n    <script src=\"https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\"></script>\n    <script src=\"{% static 'js/theme-toggle.js' %}\"></script>\n\n    <script>\n        // Hide the Google Translate bar when a language is selected\n        function hideTranslateBar() {\n            var translateBar = document.querySelector('.goog-te-banner-frame');\n            if (translateBar) {\n                translateBar.style.display = 'none'; // Hide it\n            }\n        }\n\n        // Listen for Google Translate language changes and hide the banner\n        window.addEventListener('load', function() {\n            // Initially hide the banner\n            hideTranslateBar();\n\n            // Watch for language changes by Google Translate\n            var observer = new MutationObserver(function() {\n                hideTranslateBar();\n            });\n\n            // Observe changes to the DOM\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true\n            });\n        });\n    </script>\n</body>\n</html>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Api/templates/base.html b/Api/templates/base.html
--- a/Api/templates/base.html	(revision 58e6deedc8feab8df1db5215c453c7155814a936)
+++ b/Api/templates/base.html	(date 1732837393110)
@@ -118,7 +118,8 @@
     <nav>
         <div class="nav-links">
             <a href="{% url 'home' %}">Home</a>
-             <a href="{% url 'game' %}" class="game-link">Album Guessing Game</a>
+            <a href="{% url 'game' %}" class="game-link">Album Guessing Game</a>
+            <a href="{% url 'post_list' %}" class="btn btn-primary">View Posted Wraps</a>
             <!-- Google Translate widget -->
             <div id="google_translate_element"></div>
         </div>
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"8ebb3b2a-d6e2-466a-8852-d90e5934e4e5\" name=\"Changes\" comment=\"delete account functionality added\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"DjangoConsoleOptions\" custom-start-script=\"import sys; print('Python %s on %s' % (sys.version, sys.platform))&#10;import django; print('Django %s' % django.get_version())&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;if 'setup' in dir(django): django.setup()&#10;import django_manage_shell; django_manage_shell.run(PROJECT_ROOT)\">\n    <option name=\"myCustomStartScript\" value=\"import sys; print('Python %s on %s' % (sys.version, sys.platform))&#10;import django; print('Django %s' % django.get_version())&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;if 'setup' in dir(django): django.setup()&#10;import django_manage_shell; django_manage_shell.run(PROJECT_ROOT)\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n        <option value=\"package.json\" />\n        <option value=\"CSS File\" />\n        <option value=\"HTML File\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <excluded-from-favorite>\n      <branch-storage>\n        <map>\n          <entry type=\"LOCAL\">\n            <value>\n              <list>\n                <branch-info repo=\"$PROJECT_DIR$\" source=\"main\" />\n              </list>\n            </value>\n          </entry>\n        </map>\n      </branch-storage>\n    </excluded-from-favorite>\n    <option name=\"PREVIOUS_COMMIT_AUTHORS\">\n      <list>\n        <option value=\"eshan1jaffar &lt;80078879+eshan1jaffar@users.noreply.github.com&gt;\" />\n      </list>\n    </option>\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;aishanibal&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/AdithyaRajesh1/SpotifyWrapper.git&quot;,\n    &quot;accountId&quot;: &quot;a6e4432d-a58b-4499-b0ed-614ae5476f6a&quot;\n  }\n}</component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 6\n}</component>\n  <component name=\"ProjectId\" id=\"2oOaUJnnBJkv3cXjpz1xgE4eSAI\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"DefaultHtmlFileTemplate\": \"HTML File\",\n    \"Django Server.SpotifyWrapper.executor\": \"Run\",\n    \"RunOnceActivity.OpenDjangoStructureViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\n    \"django.template.preview.state\": \"SHOW_EDITOR\",\n    \"git-widget-placeholder\": \"main\",\n    \"django.template.preview.state\": \"SHOW_EDITOR\",\n    \"git-widget-placeholder\": \"Social-Media\",\n    \"list.type.of.created.stylesheet\": \"CSS\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"ts.external.directory.path\": \"C:\\\\Program Files\\\\JetBrains\\\\PyCharm 2024.2.1\\\\plugins\\\\javascript-plugin\\\\jsLanguageServicesImpl\\\\external\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"C:\\Users\\Roohi\\SpotifyWrapper\\Api\\static\\css\" />\n      <recent name=\"$PROJECT_DIR$/Api/static/js/SpotifyWrapper\" />\n      <recent name=\"$PROJECT_DIR$/Api/templates\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"SpotifyWrapper\" type=\"Python.DjangoServer\" factoryName=\"Django server\">\n      <module name=\"SpotifyWrapper\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n        <env name=\"DJANGO_SETTINGS_MODULE\" value=\"SpotifyWrapper.settings\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"SDK_NAME\" value=\"Python 3.12\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"launchJavascriptDebuger\" value=\"false\" />\n      <option name=\"port\" value=\"8000\" />\n      <option name=\"host\" value=\"localhost\" />\n      <option name=\"additionalOptions\" value=\"\" />\n      <option name=\"browserUrl\" value=\"\" />\n      <option name=\"runTestServer\" value=\"false\" />\n      <option name=\"runNoReload\" value=\"false\" />\n      <option name=\"useCustomRunCommand\" value=\"false\" />\n      <option name=\"customRunCommand\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-js-predefined-d6986cc7102b-410509235cf1-JavaScript-PY-242.20224.428\" />\n        <option value=\"bundled-python-sdk-80e8e15d2b92-39cff9de6eef-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-242.20224.428\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"8ebb3b2a-d6e2-466a-8852-d90e5934e4e5\" name=\"Changes\" comment=\"\" />\n      <created>1730300651790</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1730300651790</updated>\n      <workItem from=\"1730300653221\" duration=\"184000\" />\n      <workItem from=\"1730743092250\" duration=\"1469000\" />\n      <workItem from=\"1730929006524\" duration=\"7785000\" />\n      <workItem from=\"1731122513124\" duration=\"9875000\" />\n      <workItem from=\"1732475516493\" duration=\"3981000\" />\n      <workItem from=\"1732735231490\" duration=\"2888000\" />\n      <workItem from=\"1732576538397\" duration=\"178000\" />\n      <workItem from=\"1732576720148\" duration=\"17429000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"partial user auth + redirect\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730309034212</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730309034212</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"fixed random errors\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730743322687</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730743322687</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"fixed random errors\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730754494290</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730754494290</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"fixed random errors\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730754499126</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730754499126</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"current songs works\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730765117689</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730765117689</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"halfway through getting 2023 wrapped\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730767600045</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730767600046</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"halfway through getting 2023 wrapped\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730768328735</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730768328735</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"halfway through getting 2023 wrapped\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730926116380</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730926116380</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"made wrapped show past 5 years\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730928452559</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730928452559</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"short/med/long term done and insta/linkedin/x share functionality added\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1731532204879</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1731532204879</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"short/med/long term done and insta/linkedin/x share functionality added\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1731801564117</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1731801564117</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"short/med/long term done and insta/linkedin/x share functionality added\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1731801572362</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1731801572362</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"short/med/long term done and insta/linkedin/x share functionality added\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1731801743640</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1731801743640</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"short/med/long term done and insta/linkedin/x share functionality added\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1731801819054</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1731801819054</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"short/med/long term done and insta/linkedin/x share functionality added\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732431735569</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732431735569</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"short/med/long term done and insta/linkedin/x share functionality added\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732432024877</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732432024877</updated>\n    </task>\n    <task id=\"LOCAL-00017\" summary=\"short/med/long term done and insta/linkedin/x share functionality added\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732433476161</created>\n      <option name=\"number\" value=\"00017\" />\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732433476161</updated>\n    </task>\n    <task id=\"LOCAL-00018\" summary=\"short/med/long term done and insta/linkedin/x share functionality added\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732683783365</created>\n      <option name=\"number\" value=\"00018\" />\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732683783365</updated>\n    </task>\n    <task id=\"LOCAL-00019\" summary=\"short/med/long term done and insta/linkedin/x share functionality added\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732683897144</created>\n      <option name=\"number\" value=\"00019\" />\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732683897144</updated>\n    </task>\n    <task id=\"LOCAL-00020\" summary=\"short/med/long term done and insta/linkedin/x share functionality added\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732685659904</created>\n      <option name=\"number\" value=\"00020\" />\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732685659904</updated>\n    </task>\n    <task id=\"LOCAL-00021\" summary=\"short/med/long term done and insta/linkedin/x share functionality added\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732686176694</created>\n      <option name=\"number\" value=\"00021\" />\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732686176694</updated>\n    </task>\n    <task id=\"LOCAL-00022\" summary=\"short/med/long term done and insta/linkedin/x share functionality added\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732686318840</created>\n      <option name=\"number\" value=\"00022\" />\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732686318840</updated>\n    </task>\n    <task id=\"LOCAL-00023\" summary=\"short/med/long term done and insta/linkedin/x share functionality added\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732735614595</created>\n      <option name=\"number\" value=\"00023\" />\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732735614595</updated>\n    </task>\n    <task id=\"LOCAL-00024\" summary=\"short/med/long term done and insta/linkedin/x share functionality added\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732769651991</created>\n      <option name=\"number\" value=\"00024\" />\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732769651991</updated>\n    </task>\n    <task id=\"LOCAL-00025\" summary=\"delete account functionality added\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1732774398268</created>\n      <option name=\"number\" value=\"00025\" />\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1732774398277</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"26\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"partial user auth + redirect\" />\n    <MESSAGE value=\"client-id\" />\n    <MESSAGE value=\"fixed random errors\" />\n    <MESSAGE value=\"current songs works\" />\n    <MESSAGE value=\"halfway through getting 2023 wrapped\" />\n    <MESSAGE value=\"made wrapped show past 5 years\" />\n    <MESSAGE value=\"short/med/long term done and insta/linkedin/x share functionality added\" />\n    <MESSAGE value=\"delete account functionality added\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"delete account functionality added\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"short/med/long term done and insta/linkedin/x share functionality added\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$PROJECT_DIR$/Api/views.py</url>\n          <line>17</line>\n          <option name=\"timeStamp\" value=\"2\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 58e6deedc8feab8df1db5215c453c7155814a936)
+++ b/.idea/workspace.xml	(date 1732859685929)
@@ -4,7 +4,13 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="8ebb3b2a-d6e2-466a-8852-d90e5934e4e5" name="Changes" comment="delete account functionality added" />
+    <list default="true" id="8ebb3b2a-d6e2-466a-8852-d90e5934e4e5" name="Changes" comment="delete account functionality added">
+      <change beforePath="$PROJECT_DIR$/Api/templates/base.html" beforeDir="false" afterPath="$PROJECT_DIR$/Api/templates/base.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Api/urls.py" beforeDir="false" afterPath="$PROJECT_DIR$/Api/urls.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Api/views.py" beforeDir="false" afterPath="$PROJECT_DIR$/Api/views.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/SpotifyWrapper/settings.py" beforeDir="false" afterPath="$PROJECT_DIR$/SpotifyWrapper/settings.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/db.sqlite3" beforeDir="false" afterPath="$PROJECT_DIR$/db.sqlite3" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -44,7 +50,7 @@
     </option>
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="main" />
+        <entry key="$PROJECT_DIR$" value="AddingOnlineButton" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -79,8 +85,6 @@
     "SHARE_PROJECT_CONFIGURATION_FILES": "true",
     "django.template.preview.state": "SHOW_EDITOR",
     "git-widget-placeholder": "main",
-    "django.template.preview.state": "SHOW_EDITOR",
-    "git-widget-placeholder": "Social-Media",
     "list.type.of.created.stylesheet": "CSS",
     "node.js.detected.package.eslint": "true",
     "node.js.selected.package.eslint": "(autodetect)",
@@ -366,7 +370,6 @@
     <MESSAGE value="short/med/long term done and insta/linkedin/x share functionality added" />
     <MESSAGE value="delete account functionality added" />
     <option name="LAST_COMMIT_MESSAGE" value="delete account functionality added" />
-    <option name="LAST_COMMIT_MESSAGE" value="short/med/long term done and insta/linkedin/x share functionality added" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
