Index: Api/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render, redirect\nfrom rest_framework.response import Response\nfrom rest_framework.reverse import reverse_lazy\nfrom rest_framework.views import APIView\nfrom rest_framework import status\nfrom requests import Request, post\nfrom django.http import JsonResponse\nfrom .models import Token\nfrom .credentials import CLIENT_ID, CLIENT_SECRET, REDIRECT_URI\nfrom .extras import create_or_update_tokens, is_spotify_authenticated, spotify_requests_execution\n\n\ndef home(request):\n    return render(request, 'home.html')\nclass Authentication(APIView):\n    def get(self, request, format=None):\n        scopes = \"user-read-currently-playing user-read-playback-state user-modify-playback-state user-top-read user-library-read playlist-read-private\"\n        url = Request('GET', 'https://accounts.spotify.com/authorize', params={\n            'scope': scopes,\n            'response_type': 'code',\n            'redirect_uri': REDIRECT_URI,\n            'client_id': CLIENT_ID,\n        }).prepare().url\n        return Response({\"url\": url}, status=status.HTTP_200_OK)\n\n\ndef spotify_redirect(request):\n    code = request.GET.get('code')\n    error = request.GET.get('error')\n\n    if error:\n        return JsonResponse({\"error\": error}, status=status.HTTP_400_BAD_REQUEST)\n\n    response = post(\n    'https://accounts.spotify.com/api/token',\n    data={\n        'grant_type': 'authorization_code',\n        'code': code,\n        'redirect_uri': REDIRECT_URI,\n        'client_id': CLIENT_ID,\n        'client_secret': CLIENT_SECRET,\n    }).json()\n\n\n    print(\"Authorization Code:\", code)\n\n    if not request.session.exists(request.session.session_key):\n        request.session.create()\n        print('successful')\n\n    access_token = response.get('access_token')\n    refresh_token = response.get('refresh_token')\n    expires_in = response.get('expires_in', 3600)\n    token_type = response.get('token_type')\n    error = response.get('error')\n\n    create_or_update_tokens(\n        session_id=request.session.session_key,\n        access_token=access_token,\n        refresh_token=refresh_token,\n        expires_in=expires_in,\n        token_type=token_type,\n    )\n\n    # Return redirect URL as JSON, handle on frontend\n    redirect_url = f\"http://localhost:8000/spotify/current-song/?code={code}\"\n    return redirect(redirect_url)\n\n\nclass CheckAuthentication(APIView):\n    def get(self, request, format=None):\n        is_authenticated = is_spotify_authenticated(self.request.session.session_key)\n        return Response({\"is_authenticated\": is_authenticated}, status=status.HTTP_200_OK)\n\nclass CurrentSong(APIView):\n    def get(self, request, format=None):\n        key = self.request.session.session_key\n        '''\n        try:\n            token = Token.objects.get(user=key)\n        except Token.DoesNotExist:\n            return Response({\"error\": \"Token not found\"}, status=status.HTTP_404_NOT_FOUND)\n'''\n        endpoint = \"me/player/currently-playing\"\n        response = spotify_requests_execution(key, endpoint)\n\n        if \"error\" in response or \"item\" not in response:\n            return Response({}, status=status.HTTP_204_NO_CONTENT)\n\n        item = response.get(\"item\")\n        progress = response.get(\"progress_ms\")\n        is_playing = response.get(\"is_playing\")\n        duration = item.get(\"duration_ms\")\n        song_id = item.get(\"id\")\n        title = item.get(\"name\")\n        album_cover = item.get(\"album\", {}).get(\"images\", [{}])[0].get(\"url\")\n        artists = \", \".join(artist.get(\"name\") for artist in item.get(\"artists\", []))\n\n        song = {\n            \"id\": song_id,\n            \"title\": title,\n            \"artists\": artists,\n            \"duration\": duration,\n            \"is_playing\": is_playing,\n            \"album_cover\": album_cover,\n            \"progress\": progress,\n        }\n\n        return Response(song, status=status.HTTP_200_OK)\n\n\nclass TopSongs2023(APIView):\n    def get(self, request, format=None):\n        key = self.request.session.session_key\n\n        # First, get all playlists to find \"Your Top Songs 2023\"\n        endpoint = \"me/playlists/\"\n        playlists_response = spotify_requests_execution(key, endpoint)\n\n        if \"error\" in playlists_response:\n            return Response({\"error\": \"Failed to fetch playlists\"}, status=status.HTTP_400_BAD_REQUEST)\n\n        # Find the \"Your Top Songs 2023\" playlist\n        top_songs_playlist = None\n        for playlist in playlists_response.get(\"items\", []):\n            if playlist.get(\"name\") == \"Your Top Songs 2023\":\n                top_songs_playlist = playlist\n                break\n\n        if not top_songs_playlist:\n            return Response(\n                {\"error\": \"Your Top Songs 2023 playlist not found\"},\n                status=status.HTTP_404_NOT_FOUND\n            )\n\n        # Get the tracks from the playlist\n        playlist_id = top_songs_playlist.get(\"id\")\n        print(f\"Found playlist ID: {playlist_id}\")\n\n        # Use the full endpoint path for Spotify-owned playlist\n        tracks_endpoint = f\"playlists/{playlist_id}/tracks/\"\n        tracks_response = spotify_requests_execution(key, tracks_endpoint)\n        print(tracks_response)\n\n        tracks = []\n        items = tracks_response.get(\"items\", [])\n\n        for item in items:\n            track = item.get(\"track\")\n            if track:\n                images = track.get(\"album\", {}).get(\"images\", [])\n                album_cover = images[0].get(\"url\") if images else None\n\n                track_data = {\n                    \"id\": track.get(\"id\"),\n                    \"name\": track.get(\"name\"),\n                    \"artists\": \", \".join(artist.get(\"name\") for artist in track.get(\"artists\", [])),\n                    \"album\": track.get(\"album\", {}).get(\"name\"),\n                    \"album_cover\": album_cover,\n                    \"duration_ms\": track.get(\"duration_ms\"),\n                    \"external_url\": track.get(\"external_urls\", {}).get(\"spotify\"),\n                    \"preview_url\": track.get(\"preview_url\"),\n                    \"popularity\": track.get(\"popularity\")\n                }\n                tracks.append(track_data)\n\n        playlist_info = {\n            \"playlist_name\": top_songs_playlist.get(\"name\"),\n            \"description\": top_songs_playlist.get(\"description\"),\n            \"owner\": top_songs_playlist.get(\"owner\", {}).get(\"display_name\"),\n            \"total_tracks\": len(tracks),\n            \"image_url\": next((image.get(\"url\") for image in top_songs_playlist.get(\"images\", [])), None),\n            \"tracks\": tracks\n        }\n\n        return Response(playlist_info, status=status.HTTP_200_OK)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Api/views.py b/Api/views.py
--- a/Api/views.py	(revision 5052e4114bc9be0f66011e278a11ece7e53d4df0)
+++ b/Api/views.py	(date 1730771995093)
@@ -113,64 +113,74 @@
     def get(self, request, format=None):
         key = self.request.session.session_key
 
-        # First, get all playlists to find "Your Top Songs 2023"
+        # Define the target playlists from 2019 to 2023
+        target_playlists = [
+            "Your Top Songs 2023",
+            "Your Top Songs 2022",
+            "Your Top Songs 2021",
+            "Your Top Songs 2020",
+            "Your Top Songs 2019"
+        ]
+
+        # Fetch all user playlists
         endpoint = "me/playlists/"
         playlists_response = spotify_requests_execution(key, endpoint)
 
         if "error" in playlists_response:
             return Response({"error": "Failed to fetch playlists"}, status=status.HTTP_400_BAD_REQUEST)
 
-        # Find the "Your Top Songs 2023" playlist
-        top_songs_playlist = None
+        # Find any matching "Your Top Songs" playlists
+        found_playlists = {}
         for playlist in playlists_response.get("items", []):
-            if playlist.get("name") == "Your Top Songs 2023":
-                top_songs_playlist = playlist
-                break
+            playlist_name = playlist.get("name")
+            if playlist_name in target_playlists:
+                found_playlists[playlist_name] = playlist
 
-        if not top_songs_playlist:
+        # If no matching playlists found, return an error
+        if not found_playlists:
             return Response(
-                {"error": "Your Top Songs 2023 playlist not found"},
+                {"error": "No 'Your Top Songs' playlists found from 2019 to 2023"},
                 status=status.HTTP_404_NOT_FOUND
             )
 
-        # Get the tracks from the playlist
-        playlist_id = top_songs_playlist.get("id")
-        print(f"Found playlist ID: {playlist_id}")
+        all_tracks = []
 
-        # Use the full endpoint path for Spotify-owned playlist
-        tracks_endpoint = f"playlists/{playlist_id}/tracks/"
-        tracks_response = spotify_requests_execution(key, tracks_endpoint)
-        print(tracks_response)
-
-        tracks = []
-        items = tracks_response.get("items", [])
+        # Retrieve and process tracks from each found playlist
+        for playlist_name, playlist in found_playlists.items():
+            playlist_id = playlist.get("id")
+            tracks_endpoint = f"playlists/{playlist_id}/tracks/"
+            tracks_response = spotify_requests_execution(key, tracks_endpoint)
+            items = tracks_response.get("items", [])
 
-        for item in items:
-            track = item.get("track")
-            if track:
-                images = track.get("album", {}).get("images", [])
-                album_cover = images[0].get("url") if images else None
+            # Process each track
+            for item in items:
+                track = item.get("track")
+                if track:
+                    images = track.get("album", {}).get("images", [])
+                    album_cover = images[0].get("url") if images else None
 
-                track_data = {
-                    "id": track.get("id"),
-                    "name": track.get("name"),
-                    "artists": ", ".join(artist.get("name") for artist in track.get("artists", [])),
-                    "album": track.get("album", {}).get("name"),
-                    "album_cover": album_cover,
-                    "duration_ms": track.get("duration_ms"),
-                    "external_url": track.get("external_urls", {}).get("spotify"),
-                    "preview_url": track.get("preview_url"),
-                    "popularity": track.get("popularity")
-                }
-                tracks.append(track_data)
+                    track_data = {
+                        "id": track.get("id"),
+                        "name": track.get("name"),
+                        "artists": ", ".join(artist.get("name") for artist in track.get("artists", [])),
+                        "album": track.get("album", {}).get("name"),
+                        "album_cover": album_cover,
+                        "duration_ms": track.get("duration_ms"),
+                        "external_url": track.get("external_urls", {}).get("spotify"),
+                        "preview_url": track.get("preview_url"),
+                        "popularity": track.get("popularity"),
+                        "playlist_name": playlist_name  # Indicate which playlist the track came from
+                    }
+                    all_tracks.append(track_data)
 
+        # Sort tracks by playlist year if desired, with the newest year first
+        all_tracks.sort(key=lambda x: x["playlist_name"], reverse=True)
+
+        # Response format
         playlist_info = {
-            "playlist_name": top_songs_playlist.get("name"),
-            "description": top_songs_playlist.get("description"),
-            "owner": top_songs_playlist.get("owner", {}).get("display_name"),
-            "total_tracks": len(tracks),
-            "image_url": next((image.get("url") for image in top_songs_playlist.get("images", [])), None),
-            "tracks": tracks
+            "combined_playlist_name": "Your Top Songs 2019-2023",
+            "total_tracks": len(all_tracks),
+            "tracks": all_tracks
         }
 
         return Response(playlist_info, status=status.HTTP_200_OK)
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"8ebb3b2a-d6e2-466a-8852-d90e5934e4e5\" name=\"Changes\" comment=\"halfway through getting 2023 wrapped\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Api/extras.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Api/extras.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Api/views.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Api/views.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/db.sqlite3\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/db.sqlite3\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"DjangoConsoleOptions\" custom-start-script=\"import sys; print('Python %s on %s' % (sys.version, sys.platform))&#10;import django; print('Django %s' % django.get_version())&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;if 'setup' in dir(django): django.setup()&#10;import django_manage_shell; django_manage_shell.run(PROJECT_ROOT)\">\n    <option name=\"myCustomStartScript\" value=\"import sys; print('Python %s on %s' % (sys.version, sys.platform))&#10;import django; print('Django %s' % django.get_version())&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;if 'setup' in dir(django): django.setup()&#10;import django_manage_shell; django_manage_shell.run(PROJECT_ROOT)\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"PREVIOUS_COMMIT_AUTHORS\">\n      <list>\n        <option value=\"eshan1jaffar &lt;80078879+eshan1jaffar@users.noreply.github.com&gt;\" />\n      </list>\n    </option>\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"UPDATE_TYPE\" value=\"REBASE\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;aishanibal&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/AdithyaRajesh1/SpotifyWrapper.git&quot;,\n    &quot;accountId&quot;: &quot;1b76475c-5901-4984-8fbf-869bf5bdf017&quot;\n  }\n}</component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 6\n}</component>\n  <component name=\"ProjectId\" id=\"2oOaUJnnBJkv3cXjpz1xgE4eSAI\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;Django Server.SpotifyWrapper.executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.OpenDjangoStructureViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;UserAuth&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RunManager\">\n    <configuration name=\"SpotifyWrapper\" type=\"Python.DjangoServer\" factoryName=\"Django server\">\n      <module name=\"SpotifyWrapper\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n        <env name=\"DJANGO_SETTINGS_MODULE\" value=\"SpotifyWrapper.settings\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"launchJavascriptDebuger\" value=\"false\" />\n      <option name=\"port\" value=\"8000\" />\n      <option name=\"host\" value=\"localhost\" />\n      <option name=\"additionalOptions\" value=\"\" />\n      <option name=\"browserUrl\" value=\"\" />\n      <option name=\"runTestServer\" value=\"false\" />\n      <option name=\"runNoReload\" value=\"false\" />\n      <option name=\"useCustomRunCommand\" value=\"false\" />\n      <option name=\"customRunCommand\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-js-predefined-d6986cc7102b-410509235cf1-JavaScript-PY-242.20224.428\" />\n        <option value=\"bundled-python-sdk-80e8e15d2b92-39cff9de6eef-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-242.20224.428\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"8ebb3b2a-d6e2-466a-8852-d90e5934e4e5\" name=\"Changes\" comment=\"\" />\n      <created>1730300651790</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1730300651790</updated>\n      <workItem from=\"1730300653221\" duration=\"184000\" />\n      <workItem from=\"1730743092250\" duration=\"1469000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"partial user auth + redirect\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730309034212</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730309034212</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"fixed random errors\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730743322687</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730743322687</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"fixed random errors\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730754494290</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730754494290</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"fixed random errors\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730754499126</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730754499126</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"current songs works\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730765117689</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730765117689</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"halfway through getting 2023 wrapped\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730767600045</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730767600046</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"halfway through getting 2023 wrapped\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1730768328735</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1730768328735</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"8\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"partial user auth + redirect\" />\n    <MESSAGE value=\"client-id\" />\n    <MESSAGE value=\"fixed random errors\" />\n    <MESSAGE value=\"current songs works\" />\n    <MESSAGE value=\"halfway through getting 2023 wrapped\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"halfway through getting 2023 wrapped\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5052e4114bc9be0f66011e278a11ece7e53d4df0)
+++ b/.idea/workspace.xml	(date 1730771195430)
@@ -4,9 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="8ebb3b2a-d6e2-466a-8852-d90e5934e4e5" name="Changes" comment="halfway through getting 2023 wrapped">
+    <list default="true" id="8ebb3b2a-d6e2-466a-8852-d90e5934e4e5" name="Changes" comment="current songs works">
+      <change beforePath="$PROJECT_DIR$/.idea/dataSources.local.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources.local.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Api/extras.py" beforeDir="false" afterPath="$PROJECT_DIR$/Api/extras.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Api/views.py" beforeDir="false" afterPath="$PROJECT_DIR$/Api/views.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/db.sqlite3" beforeDir="false" afterPath="$PROJECT_DIR$/db.sqlite3" afterDir="false" />
     </list>
@@ -159,23 +159,7 @@
       <option name="project" value="LOCAL" />
       <updated>1730765117689</updated>
     </task>
-    <task id="LOCAL-00006" summary="halfway through getting 2023 wrapped">
-      <option name="closed" value="true" />
-      <created>1730767600045</created>
-      <option name="number" value="00006" />
-      <option name="presentableId" value="LOCAL-00006" />
-      <option name="project" value="LOCAL" />
-      <updated>1730767600046</updated>
-    </task>
-    <task id="LOCAL-00007" summary="halfway through getting 2023 wrapped">
-      <option name="closed" value="true" />
-      <created>1730768328735</created>
-      <option name="number" value="00007" />
-      <option name="presentableId" value="LOCAL-00007" />
-      <option name="project" value="LOCAL" />
-      <updated>1730768328735</updated>
-    </task>
-    <option name="localTasksCounter" value="8" />
+    <option name="localTasksCounter" value="6" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -186,7 +170,6 @@
     <MESSAGE value="client-id" />
     <MESSAGE value="fixed random errors" />
     <MESSAGE value="current songs works" />
-    <MESSAGE value="halfway through getting 2023 wrapped" />
-    <option name="LAST_COMMIT_MESSAGE" value="halfway through getting 2023 wrapped" />
+    <option name="LAST_COMMIT_MESSAGE" value="current songs works" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/dataSources.local.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"dataSourceStorageLocal\" created-in=\"PY-242.21829.153\">\n    <data-source name=\"db\" uuid=\"bcff646e-f419-4c25-8c9b-ec4479c08dae\">\n      <database-info product=\"SQLite\" version=\"3.45.1\" jdbc-version=\"4.2\" driver-name=\"SQLite JDBC\" driver-version=\"3.45.1.0\" dbms=\"SQLITE\" exact-version=\"3.45.1\" exact-driver-version=\"3.45\">\n        <identifier-quote-string>&quot;</identifier-quote-string>\n      </database-info>\n      <case-sensitivity plain-identifiers=\"mixed\" quoted-identifiers=\"mixed\" />\n      <auth-provider>no-auth</auth-provider>\n      <schema-mapping>\n        <introspection-scope>\n          <node kind=\"schema\" qname=\"@\" />\n        </introspection-scope>\n      </schema-mapping>\n    </data-source>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dataSources.local.xml b/.idea/dataSources.local.xml
--- a/.idea/dataSources.local.xml	(revision 5052e4114bc9be0f66011e278a11ece7e53d4df0)
+++ b/.idea/dataSources.local.xml	(date 1730770236893)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="dataSourceStorageLocal" created-in="PY-242.21829.153">
+  <component name="dataSourceStorageLocal" created-in="PY-242.20224.428">
     <data-source name="db" uuid="bcff646e-f419-4c25-8c9b-ec4479c08dae">
       <database-info product="SQLite" version="3.45.1" jdbc-version="4.2" driver-name="SQLite JDBC" driver-version="3.45.1.0" dbms="SQLITE" exact-version="3.45.1" exact-driver-version="3.45">
         <identifier-quote-string>&quot;</identifier-quote-string>
