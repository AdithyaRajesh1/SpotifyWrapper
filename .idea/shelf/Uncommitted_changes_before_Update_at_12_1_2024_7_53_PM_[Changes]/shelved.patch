Index: Api/templates/register.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"base.html\" %}\r\n\r\n{% block title %}Reset Password{% endblock %}\r\n\r\n{% block content %}\r\n    <div class=\"container\">\r\n        <h2>Register</h2>\r\n        <form method=\"post\" class=\"register-form\">\r\n            {% csrf_token %}\r\n            {{ form.as_p }}\r\n            <button type=\"submit\">Register</button>\r\n        </form>\r\n        <p class=\"account-message\">Already have an account? <a href=\"{% url 'login' %}\" class=\"link\">Log in</a></p>\r\n    </div>\r\n\r\n    <style>\r\n        /* Global Styles */\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n            margin: 0;\r\n            padding: 0;\r\n            line-height: 1.6;\r\n        }\r\n\r\n        .container {\r\n            max-width: 500px;\r\n            margin: 50px auto;\r\n            padding: 20px;\r\n            border-radius: 8px;\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        h2 {\r\n            text-align: center;\r\n            margin-bottom: 20px;\r\n            font-size: 24px;\r\n        }\r\n\r\n        .register-form {\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 15px;\r\n        }\r\n\r\n        .register-form input {\r\n            width: 100%;\r\n            padding: 10px;\r\n            border: 1px solid #ccc;\r\n            border-radius: 5px;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        .register-form button {\r\n            padding: 12px 20px;\r\n            border: none;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-size: 16px;\r\n            transition: background-color 0.3s ease;\r\n        }\r\n\r\n        .account-message {\r\n            text-align: center;\r\n            margin-top: 15px;\r\n            font-size: 14px;\r\n        }\r\n\r\n        .account-message .link {\r\n            text-decoration: none;\r\n            color: inherit;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .account-message .link:hover {\r\n            text-decoration: underline;\r\n        }\r\n\r\n        /* Light Theme */\r\n        body.light-theme {\r\n            background-color: #f9f9f9;\r\n            color: #333;\r\n        }\r\n\r\n        body.light-theme .container {\r\n            background-color: white;\r\n        }\r\n\r\n        body.light-theme h2 {\r\n            color: #444;\r\n        }\r\n\r\n        body.light-theme .register-form input {\r\n            border: 1px solid #ddd;\r\n            background-color: #fff;\r\n            color: #333;\r\n        }\r\n\r\n        body.light-theme .register-form button {\r\n            background-color: #1db954; /* Spotify Green */\r\n            color: white;\r\n        }\r\n\r\n        body.light-theme .register-form button:hover {\r\n            background-color: #1aa13f; /* Darker Spotify Green */\r\n        }\r\n\r\n        body.light-theme .account-message .link {\r\n            color: #1db954;\r\n        }\r\n\r\n        /* Dark Theme */\r\n        body.dark-theme {\r\n            background-color: #1e1e1e;\r\n            color: #e0e0e0;\r\n        }\r\n\r\n        body.dark-theme .container {\r\n            background-color: #2c2c2c;\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n        }\r\n\r\n        body.dark-theme h2 {\r\n            color: #f1f1f1;\r\n        }\r\n\r\n        body.dark-theme .register-form input {\r\n            border: 1px solid #555;\r\n            background-color: #333;\r\n            color: #ddd;\r\n        }\r\n\r\n        body.dark-theme .register-form button {\r\n            background-color: #1db954; /* Spotify Green */\r\n            color: white;\r\n        }\r\n\r\n        body.dark-theme .register-form button:hover {\r\n            background-color: #1aa13f; /* Darker Spotify Green */\r\n        }\r\n\r\n        body.dark-theme .account-message .link {\r\n            color: #1db954;\r\n        }\r\n\r\n        /* Blue Theme */\r\n        body.blue-theme {\r\n            background-color: #e6f7ff;\r\n            color: #004085;\r\n        }\r\n\r\n        body.blue-theme .container {\r\n            background-color: white;\r\n        }\r\n\r\n        body.blue-theme h2 {\r\n            color: #0056b3;\r\n        }\r\n\r\n        body.blue-theme .register-form input {\r\n            border: 1px solid #ccd;\r\n            background-color: #f0faff;\r\n            color: #004085;\r\n        }\r\n\r\n        body.blue-theme .register-form button {\r\n            background-color: #66b3ff; /* Softer Blue */\r\n            color: white;\r\n        }\r\n\r\n        body.blue-theme .register-form button:hover {\r\n            background-color: #4da6ff; /* Slightly Darker Blue */\r\n        }\r\n\r\n        body.blue-theme .account-message .link {\r\n            color: #004085;\r\n        }\r\n    </style>\r\n{% endblock %}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Api/templates/register.html b/Api/templates/register.html
--- a/Api/templates/register.html	(revision 7dc37191b2a0ed5822185c481ee1ee6770fa5d9c)
+++ b/Api/templates/register.html	(date 1733100792385)
@@ -69,6 +69,7 @@
             text-decoration: none;
             color: inherit;
             font-weight: bold;
+            transition: color 0.3s ease;
         }
 
         .account-message .link:hover {
@@ -96,16 +97,16 @@
         }
 
         body.light-theme .register-form button {
-            background-color: #1db954; /* Spotify Green */
+            background-color: #28a745; /* Green color */
             color: white;
         }
 
         body.light-theme .register-form button:hover {
-            background-color: #1aa13f; /* Darker Spotify Green */
+            background-color: #218838;
         }
 
         body.light-theme .account-message .link {
-            color: #1db954;
+            color: #28a745; /* Green color */
         }
 
         /* Dark Theme */
@@ -130,16 +131,16 @@
         }
 
         body.dark-theme .register-form button {
-            background-color: #1db954; /* Spotify Green */
+            background-color: #28a745; /* Green color */
             color: white;
         }
 
         body.dark-theme .register-form button:hover {
-            background-color: #1aa13f; /* Darker Spotify Green */
+            background-color: #218838;
         }
 
         body.dark-theme .account-message .link {
-            color: #1db954;
+            color: #28a745; /* Green color */
         }
 
         /* Blue Theme */
@@ -163,12 +164,12 @@
         }
 
         body.blue-theme .register-form button {
-            background-color: #66b3ff; /* Softer Blue */
+            background-color: #007bff;
             color: white;
         }
 
         body.blue-theme .register-form button:hover {
-            background-color: #4da6ff; /* Slightly Darker Blue */
+            background-color: #0056b3;
         }
 
         body.blue-theme .account-message .link {
Index: Api/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\r\nfrom django.urls import path, include\r\nfrom django.contrib.auth import views as auth_views\r\n\r\nfrom Api import views\r\nfrom Api.views import spotify_redirect, CheckAuthentication, CurrentSong, Authentication, home, TopSongs, \\\r\n    SpotifyWrappedView, register, GameView, delete_account, PostListView\r\nurlpatterns = [\r\n\r\n    path('', home, name='home'),\r\n    path('admin/', admin.site.urls),\r\n    path('redirect/', spotify_redirect, name='redirect'),\r\n    path('check-auth/', Authentication.as_view(), name='check-auth'),\r\n    path('current-song/', CurrentSong.as_view()),\r\n    path('top/', TopSongs.as_view()),\r\n    path('wrapped/', SpotifyWrappedView.as_view(), name = 'wrapped'),\r\n    path('game/', GameView.as_view(), name='game'),\r\n\r\n\r\n    path('register/',register, name='register'),\r\n    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),\r\n    path('logout/', auth_views.LogoutView.as_view(next_page='login'), name='logout'),\r\n    path('password_reset/', auth_views.PasswordResetView.as_view(template_name='password_reset.html'), name='password_reset'),\r\n    path('password_reset_done/', auth_views.PasswordResetDoneView.as_view(template_name='password_reset_done.html'), name='password_reset_done'),\r\n    path('password_reset_confirm/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(template_name='password_reset_confirm.html'), name='password_reset_confirm'),\r\n    path('password_reset_complete/', auth_views.PasswordResetCompleteView.as_view(template_name='password_reset_complete.html'), name='password_reset_complete'),\r\n    path('delete-account/', delete_account, name='delete_account'),\r\n\r\n    path('wrapped/intro/', views.SpotifyWrappedOverviewView.as_view(), name='wrapped_intro'),\r\n    path('wrapped/artists/', views.SpotifyWrappedArtistsView.as_view(), name='wrapped_artists'),\r\n    path('wrapped/tracks/', views.SpotifyWrappedTracksView.as_view(), name='wrapped_tracks'),\r\n    path('wrapped/albums/', views.SpotifyWrappedAlbumsView.as_view(), name='wrapped_albums'),\r\n    path('wrapped/profile/', views.SpotifyWrappedProfileView.as_view(), name='wrapped_profile'),\r\n    path('wrapped/response/', views.SpotifyWrappedGenAIView.as_view(), name='wrapped_response'),\r\n\r\n    path('wrapped/genres', views.TopGenresView.as_view(), name='wrapped_genres'),\r\n\r\n    path('wrapped/locations', views.TopLocationsView.as_view(), name='wrapped_locations'),\r\n\r\n    path('savedwraps/', views.savedwraps, name='savedwraps'),\r\n    path('wrap/<int:id>/', views.wrap_detail, name='wrap_detail'),  # Detailed view for each wrap\r\n    path('post-wrap/<int:wrap_id>/', views.post_wrap_to_website, name='post_wrap_to_website'),\r\n    #path('posts/', views.PostListView.as_view(), name='post_list'),\r\npath('posts/', views.PostListView.as_view(), name='post_list'),\r\n\r\n    path('savedwraps/artists/<int:id>/', views.saved_spotify_wrapped_artists, name='saved_spotify_wrapped_artists'),\r\n    path('savedwraps/tracks/<int:id>/', views.saved_spotify_wrapped_tracks, name='saved_spotify_wrapped_tracks'),\r\n    path('savedwraps/albums/<int:id>/', views.saved_spotify_wrapped_albums, name='saved_spotify_wrapped_albums'),\r\n    path('savedwraps/profile/<int:id>/', views.saved_spotify_wrapped_profile, name='saved_spotify_wrapped_profile'),\r\n\r\n    path('wrap/<int:id>/', views.wrap_detail, name='wrap_detail'),\r\n\r\n    path('delete_wrap/<int:id>/', views.delete_spotify_wrap, name='delete_spotify_wrap'),\r\n    path('posted-wraps/', views.WebsiteSocial, name='post_list'),\r\n    path('delete_social/<int:id>/', views.delete_social, name='delete_social'),\r\n    path('contact/', views.contact_developers, name='contact_developers'),\r\n]\r\n# Detailed view for each wrap\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Api/urls.py b/Api/urls.py
--- a/Api/urls.py	(revision 7dc37191b2a0ed5822185c481ee1ee6770fa5d9c)
+++ b/Api/urls.py	(date 1733100594805)
@@ -4,7 +4,8 @@
 
 from Api import views
 from Api.views import spotify_redirect, CheckAuthentication, CurrentSong, Authentication, home, TopSongs, \
-    SpotifyWrappedView, register, GameView, delete_account, PostListView
+    SpotifyWrappedView, register, GameView, delete_account, PostListView, contact_view
+
 urlpatterns = [
 
     path('', home, name='home'),
@@ -53,6 +54,7 @@
     path('delete_wrap/<int:id>/', views.delete_spotify_wrap, name='delete_spotify_wrap'),
     path('posted-wraps/', views.WebsiteSocial, name='post_list'),
     path('delete_social/<int:id>/', views.delete_social, name='delete_social'),
-    path('contact/', views.contact_developers, name='contact_developers'),
+    path('contact/', views.contact_view, name='contact_developers'),
+
 ]
 # Detailed view for each wrap
Index: Api/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth.decorators import login_required\r\nfrom django.contrib.auth.mixins import LoginRequiredMixin\r\nfrom django.shortcuts import render, redirect, get_object_or_404\r\nfrom rest_framework.response import Response\r\nfrom rest_framework.reverse import reverse_lazy\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework import status\r\nfrom requests import Request, post\r\nfrom django.http import JsonResponse, Http404\r\nfrom .models import Token\r\nfrom .credential import CLIENT_ID, CLIENT_SECRET, REDIRECT_URI, API_KEY\r\nfrom django.http import JsonResponse\r\nfrom .models import Token, Social\r\nfrom .extras import create_or_update_tokens, is_spotify_authenticated, spotify_requests_execution\r\nfrom collections import Counter\r\nfrom datetime import datetime, timedelta\r\nimport sqlite3\r\nfrom django.contrib.auth.forms import UserCreationForm\r\nfrom django.contrib import messages\r\nfrom rest_framework.permissions import IsAuthenticated\r\nfrom django.core.serializers.json import DjangoJSONEncoder\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom django.contrib import messages\r\nfrom django.contrib.auth import logout\r\nimport urllib.parse\r\nfrom django.shortcuts import get_object_or_404, redirect\r\nfrom django.contrib import messages\r\nfrom rest_framework.views import APIView\r\nfrom .models import SpotifyWrapped, Social\r\nfrom django.views.generic import ListView\r\nfrom .models import Social\r\n#import google.generativeai as genai\r\nimport google.generativeai as genai\r\nfrom django.core.mail import send_mail\r\nimport os\r\nfrom django.shortcuts import render  # Assuming the function is in utils.py\r\n\r\nfrom django.shortcuts import render, redirect\r\n\r\n\r\ndef home(request):\r\n    if request.user.is_authenticated:\r\n        return redirect('spotify/check-auth')  # Replace 'dashboard' with your dashboard route name\r\n    else:\r\n        return redirect('login')  # Replace 'login' with your login route name\r\n\r\n\r\n\r\n\r\ndef register(request):\r\n    if request.method == 'POST':\r\n        form = UserCreationForm(request.POST)\r\n        if form.is_valid():\r\n            form.save()\r\n            messages.success(request, 'Account created successfully. Please log in.')\r\n            return redirect('login')\r\n    else:\r\n        form = UserCreationForm()\r\n    return render(request, 'register.html', {'form': form})\r\n\r\n\r\n\r\ndef contact_view(request):\r\n    success_message = None\r\n\r\n    if request.method == 'POST':\r\n        # Get data from the form\r\n        name = request.POST.get('name')\r\n        email = request.POST.get('email')\r\n        message = request.POST.get('message')\r\n\r\n        # Example: Send email (or handle the message)\r\n        send_mail(\r\n            f\"Message from {name}\",\r\n            message,\r\n            email,\r\n            ['developer@example.com'],  # Replace with your email\r\n        )\r\n\r\n        # Display success message\r\n        success_message = \"Thank you for contacting us! We will get back to you soon.\"\r\n\r\n    return render(request, 'contact.html', {'success_message': success_message})\r\n\r\nclass Authentication(APIView):\r\n    permission_classes = [IsAuthenticated]\r\n    def get(self, request, format=None):\r\n        scopes = \"user-read-currently-playing user-read-playback-state user-modify-playback-state user-top-read user-library-read playlist-read-private user-read-recently-played user-read-private user-read-email\"\r\n        url = Request('GET', 'https://accounts.spotify.com/authorize', params={\r\n            'scope': scopes,\r\n            'response_type': 'code',\r\n            'redirect_uri': REDIRECT_URI,\r\n            'client_id': CLIENT_ID,\r\n        }).prepare().url\r\n        #return Response({\"url\": url}, status=status.HTTP_200_OK)\r\n        return render(request, 'auth.html', {\"url\": url})\r\n\r\n\r\n\r\n\r\n@login_required\r\ndef spotify_redirect(request):\r\n    code = request.GET.get('code')\r\n    error = request.GET.get('error')\r\n\r\n    if error:\r\n        return JsonResponse({\"error\": error}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n    response = post(\r\n    'https://accounts.spotify.com/api/token',\r\n    data={\r\n        'grant_type': 'authorization_code',\r\n        'code': code,\r\n        'redirect_uri': REDIRECT_URI,\r\n        'client_id': CLIENT_ID,\r\n        'client_secret': CLIENT_SECRET,\r\n    }).json()\r\n\r\n\r\n    print(\"Authorization Code:\", code)\r\n\r\n    if not request.session.exists(request.session.session_key):\r\n        request.session.create()\r\n        print('successful')\r\n\r\n    access_token = response.get('access_token')\r\n    refresh_token = response.get('refresh_token')\r\n    expires_in = response.get('expires_in', 3600)\r\n    token_type = response.get('token_type')\r\n    error = response.get('error')\r\n\r\n    create_or_update_tokens(\r\n        session_id=request.session.session_key,\r\n        access_token=access_token,\r\n        refresh_token=refresh_token,\r\n        expires_in=expires_in,\r\n        token_type=token_type,\r\n    )\r\n\r\n    # Return redirect URL as JSON, handle on frontend\r\n    redirect_url = f\"http://localhost:8000/spotify/wrapped/intro?code={code}\"\r\n    return redirect(redirect_url)\r\n\r\n\r\n@login_required\r\ndef delete_account(request):\r\n    if request.method == 'POST':\r\n        user = request.user\r\n        user.delete()\r\n        logout(request)\r\n        messages.success(request, 'Your account has been successfully deleted.')\r\n        return redirect('home')\r\n    return render(request, 'delete_account.html')\r\n\r\n\r\nclass CheckAuthentication(APIView):\r\n    permission_classes = [IsAuthenticated]\r\n    def get(self, request, format=None):\r\n        is_authenticated = is_spotify_authenticated(self.request.session.session_key)\r\n        return Response({\"is_authenticated\": is_authenticated}, status=status.HTTP_200_OK)\r\n\r\n\r\n\r\nclass CurrentSong(APIView):\r\n    permission_classes = [IsAuthenticated]\r\n    def get(self, request, format=None):\r\n        key = self.request.session.session_key\r\n        '''\r\n        try:\r\n            token = Token.objects.get(user=key)\r\n        except Token.DoesNotExist:\r\n            return Response({\"error\": \"Token not found\"}, status=status.HTTP_404_NOT_FOUND)\r\n'''\r\n        endpoint = \"me/player/currently-playing\"\r\n        response = spotify_requests_execution(key, endpoint)\r\n\r\n        if \"error\" in response or \"item\" not in response:\r\n            return Response({}, status=status.HTTP_204_NO_CONTENT)\r\n\r\n        item = response.get(\"item\")\r\n        progress = response.get(\"progress_ms\")\r\n        is_playing = response.get(\"is_playing\")\r\n        duration = item.get(\"duration_ms\")\r\n        song_id = item.get(\"id\")\r\n        title = item.get(\"name\")\r\n        album_cover = item.get(\"album\", {}).get(\"images\", [{}])[0].get(\"url\")\r\n        artists = \", \".join(artist.get(\"name\") for artist in item.get(\"artists\", []))\r\n\r\n        song = {\r\n            \"id\": song_id,\r\n            \"title\": title,\r\n            \"artists\": artists,\r\n            \"duration\": duration,\r\n            \"is_playing\": is_playing,\r\n            \"album_cover\": album_cover,\r\n            \"progress\": progress,\r\n        }\r\n\r\n        return Response(song, status=status.HTTP_200_OK)\r\n\r\nclass TopSongs(APIView):\r\n    def get(self, request, format=None):\r\n        key = self.request.session.session_key\r\n        target_playlists = [\r\n            \"Your Top Songs 2023\",\r\n            \"Your Top Songs 2022\",\r\n            \"Your Top Songs 2021\",\r\n            \"Your Top Songs 2020\",\r\n            \"Your Top Songs 2019\"\r\n        ]\r\n\r\n        endpoint = \"me/playlists/\"\r\n        playlists_response = spotify_requests_execution(key, endpoint)\r\n\r\n        if \"error\" in playlists_response:\r\n            return Response({\"error\": \"Failed to fetch playlists\"}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n        found_playlists = {}\r\n        for playlist in playlists_response.get(\"items\", []):\r\n            playlist_name = playlist.get(\"name\")\r\n            if playlist_name in target_playlists:\r\n                found_playlists[playlist_name] = playlist\r\n\r\n        playlists_by_year = {}\r\n\r\n        for playlist_name, playlist in found_playlists.items():\r\n            playlist_id = playlist.get(\"id\")\r\n            tracks_endpoint = f\"playlists/{playlist_id}/tracks/\"\r\n            tracks_response = spotify_requests_execution(key, tracks_endpoint)\r\n            items = tracks_response.get(\"items\", [])\r\n\r\n            tracks = []\r\n            for item in items:\r\n                track = item.get(\"track\")\r\n                if track:\r\n                    track_data = {\r\n                        \"id\": track.get(\"id\"),\r\n                        \"name\": track.get(\"name\"),\r\n                        \"artists\": \", \".join(artist.get(\"name\") for artist in track.get(\"artists\", [])),\r\n                        \"album\": track.get(\"album\", {}).get(\"name\"),\r\n                        \"album_cover\": track.get(\"album\", {}).get(\"images\", [{}])[0].get(\"url\"),\r\n                        \"duration_ms\": track.get(\"duration_ms\"),\r\n                        \"preview_url\": track.get(\"preview_url\"),  # Add preview URL for playback\r\n                        \"popularity\": track.get(\"popularity\"),\r\n                    }\r\n                    tracks.append(track_data)\r\n            playlists_by_year[playlist_name] = tracks\r\n\r\n        return render(request, 'dashboard.html', {\"playlists_by_year\": playlists_by_year})\r\nimport random\r\nclass GameView(APIView):\r\n    def get(self, request, format=None):\r\n        # Ensure the user is authenticated\r\n        if not request.user.is_authenticated:\r\n            return redirect('login')  # Redirect to the login page if not logged in\r\n\r\n        # Ensure we have a session\r\n        if not request.session.session_key:\r\n            request.session.create()\r\n\r\n        time_range = request.GET.get('time_range', 'medium_term')\r\n\r\n        # Validate time range\r\n        valid_ranges = ['short_term', 'medium_term', 'long_term']\r\n        if time_range not in valid_ranges:\r\n            time_range = 'medium_term'\r\n\r\n        # Fetch top tracks\r\n        key = request.session.session_key\r\n        top_tracks_endpoint = f\"me/top/tracks?time_range={time_range}&limit=50\"\r\n        top_tracks_response = spotify_requests_execution(key, top_tracks_endpoint)\r\n\r\n        # Prepare album data for the game\r\n        album_game_data = []\r\n        for track in top_tracks_response.get(\"items\", []):\r\n            album = track.get(\"album\", {})\r\n\r\n            # Ensure we have all required fields\r\n            if (album.get(\"name\") and album.get(\"artists\") and album.get(\"images\")):\r\n                album_entry = {\r\n                    \"album_name\": album[\"name\"],\r\n                    \"artist\": album[\"artists\"][0][\"name\"],\r\n                    \"image\": album[\"images\"][0][\"url\"],\r\n                    \"album_id\": album.get(\"id\", str(hash(album[\"name\"])))\r\n                }\r\n                album_game_data.append(album_entry)\r\n\r\n        # Shuffle the albums to randomize game\r\n        random.shuffle(album_game_data)\r\n\r\n        # Select first 10 albums for the game or fewer if not enough\r\n        selected_albums = album_game_data[:10]\r\n\r\n        # Prepare albums with blanked-out names\r\n        for album in selected_albums:\r\n            # Create a blanked-out version of the album name\r\n            words = album['album_name'].split()\r\n\r\n            # Choose a random word to blank out\r\n            blank_index = random.randint(0, len(words) - 1)\r\n            original_word = words[blank_index]\r\n\r\n            # Replace the chosen word with underscores\r\n            words[blank_index] = '_' * len(original_word)\r\n\r\n            # Store additional game information\r\n            album['blanked_name'] = ' '.join(words)\r\n            album['correct_word'] = original_word\r\n            album['word_index'] = blank_index\r\n\r\n        # Time range display names\r\n        time_range_display = {\r\n            'short_term': 'Last 4 Weeks',\r\n            'medium_term': 'Last 6 Months',\r\n            'long_term': 'All Time'\r\n        }\r\n\r\n        # Store game state in session\r\n        request.session['spotify_game_albums'] = selected_albums\r\n        request.session['spotify_game_session'] = {\r\n            \"current_round\": 0,\r\n            \"total_rounds\": len(selected_albums),\r\n            \"score\": 0\r\n        }\r\n        request.session.modified = True\r\n\r\n        # Structure the data for the frontend\r\n        trapped_data = {\r\n            \"currentTimeRange\": time_range,\r\n            \"timeRangeDisplay\": time_range_display[time_range],\r\n            \"availableTimeRanges\": [\r\n                {'value': tr, 'display': time_range_display[tr]}\r\n                for tr in valid_ranges\r\n            ],\r\n            \"gameData\": {\r\n                \"currentAlbum\": selected_albums[0],\r\n                \"allAlbums\": selected_albums,\r\n                \"gameSession\": {\r\n                    \"current_round\": 0,\r\n                    \"total_rounds\": len(selected_albums),\r\n                    \"score\": 0\r\n                }\r\n            }\r\n        }\r\n\r\n        # Return JSON for API consumption\r\n        if request.headers.get('Accept') == 'application/json':\r\n            return JsonResponse(trapped_data, encoder=DjangoJSONEncoder)\r\n\r\n        # Otherwise render the template\r\n        return render(request, \"album_guessing_game.html\", {\r\n            \"trapped_data\": trapped_data,\r\n            \"page_title\": f\"Spotify Album Guessing Game\",\r\n        })\r\n\r\n    def post(self, request, format=None):\r\n        # Ensure the user is authenticated\r\n        if not request.user.is_authenticated:\r\n            return redirect('login')  # Redirect to the login page if not logged in\r\n\r\n        # Retrieve game state from session\r\n        try:\r\n            albums = request.session.get('spotify_game_albums', [])\r\n            game_session = request.session.get('spotify_game_session', {})\r\n\r\n            if not albums or not game_session:\r\n                return JsonResponse({\"error\": \"Game session not found\"}, status=400)\r\n\r\n            # Get submitted answer\r\n            submitted_word = request.data.get('submittedWord', '').strip()\r\n\r\n            # Check if answer is correct\r\n            current_album = albums[game_session['current_round']]\r\n            is_correct = (\r\n                    submitted_word.lower() == current_album['correct_word'].lower()\r\n            )\r\n\r\n            # Update score\r\n            if is_correct:\r\n                game_session['score'] += 1\r\n\r\n            # Move to next round\r\n            game_session['current_round'] += 1\r\n\r\n            # Check if game is over\r\n            is_game_over = game_session['current_round'] >= game_session['total_rounds']\r\n\r\n            # Prepare response\r\n            response_data = {\r\n                \"isCorrect\": is_correct,\r\n                \"correctWord\": current_album['correct_word'],\r\n                \"score\": game_session['score'],\r\n                \"currentRound\": game_session['current_round'],\r\n                \"totalRounds\": game_session['total_rounds'],\r\n                \"isGameOver\": is_game_over\r\n            }\r\n\r\n            # If not game over, include next album\r\n            if not is_game_over:\r\n                response_data['nextAlbum'] = albums[game_session['current_round']]\r\n\r\n            # Update session\r\n            request.session['spotify_game_session'] = game_session\r\n            request.session.modified = True\r\n\r\n            return JsonResponse(response_data)\r\n\r\n        except Exception as e:\r\n            return JsonResponse({\"error\": str(e)}, status=500)\r\nclass SpotifyWrappedView(APIView):\r\n   def get(self, request, format=None):\r\n       key = self.request.session.session_key\r\n       # Configure the API key for the genai module\r\n       # Expanded time ranges to include seasonal options\r\n       time_range = request.GET.get('time_range', 'medium_term')\r\n\r\n       # Updated valid ranges to include seasonal options\r\n       valid_ranges = [\r\n           'short_term',  # Last 4 Weeks\r\n           'medium_term',  # Last 6 Months\r\n           'long_term',  # All Time\r\n           'christmas',  # Christmas season\r\n           'halloween'  # Halloween season\r\n       ]\r\n\r\n       # Validate time range\r\n       if time_range not in valid_ranges:\r\n           time_range = 'medium_term'\r\n\r\n       # Define date ranges for seasonal wrapped\r\n       current_year = datetime.now().year\r\n       seasonal_ranges = {\r\n           'christmas': {\r\n               'start_date': f'{current_year - 1}-12-01',\r\n               'end_date': f'{current_year - 1}-12-31'\r\n           },\r\n           'halloween': {\r\n               'start_date': f'{current_year}-10-01',\r\n               'end_date': f'{current_year}-10-31'\r\n           }\r\n       }\r\n\r\n       # Modify the endpoint to include date filtering for seasonal ranges\r\n       def get_seasonal_endpoint(base_endpoint, season):\r\n           if season in ['christmas', 'halloween']:\r\n               start_date = seasonal_ranges[season]['start_date']\r\n               end_date = seasonal_ranges[season]['end_date']\r\n               return f\"{base_endpoint}&after={start_date}&before={end_date}\"\r\n           return base_endpoint\r\n\r\n       # 1. Top Artists (with potential seasonal filtering)\r\n       top_artists_endpoint = get_seasonal_endpoint(\r\n           f\"me/top/artists?time_range={time_range}&limit=50\",\r\n           time_range\r\n       )\r\n       top_artists_response = spotify_requests_execution(key, top_artists_endpoint)\r\n\r\n       # 2. Top Tracks (with potential seasonal filtering)\r\n       top_tracks_endpoint = get_seasonal_endpoint(\r\n           f\"me/top/tracks?time_range={time_range}&limit=50\",\r\n           time_range\r\n       )\r\n       top_tracks_response = spotify_requests_execution(key, top_tracks_endpoint)\r\n\r\n\r\n       # 3. Recently played tracks (this endpoint doesn't use time_range)\r\n       recent_tracks_endpoint = \"me/player/recently-played?limit=50\"\r\n       recent_tracks_response = spotify_requests_execution(key, recent_tracks_endpoint)\r\n\r\n\r\n       # 4. Get user's playlists\r\n       playlists_endpoint = \"me/playlists\"\r\n       playlists_response = spotify_requests_execution(key, playlists_endpoint)\r\n\r\n       import google.generativeai as genai\r\n       # 5. Get user profile\r\n       profile_endpoint = \"me\"\r\n       profile_response = spotify_requests_execution(key, profile_endpoint)\r\n       # Extract top song names and their artists\r\n       genai.configure(api_key=API_KEY)\r\n       model = genai.GenerativeModel(\"gemini-1.5-flash\")\r\n       top_songs_and_artists = [\r\n           f\"{track['name']} by {', '.join(artist['name'] for artist in track['artists'])}\"\r\n           for track in top_tracks_response.get(\"items\", [])[:5]\r\n       ]\r\n       top_songs_and_artists_str = \"; \".join(top_songs_and_artists)\r\n\r\n\r\n\r\n\r\n       # Generate dynamic description based on top songs and artists\r\n       response = model.generate_content(\r\n           f\"Dynamically describe how someone who listens to my kind of music tends to act/think/dress. \"\r\n           f\"These are my top songs and artists: {top_songs_and_artists_str}. Limit the response to less than 100 words.\"\r\n       )\r\n       print(response)\r\n       # Process the data\r\n       all_artists = set()\r\n       for artist in top_artists_response.get(\"items\", []):\r\n           all_artists.add(artist[\"id\"])\r\n\r\n\r\n       for track in top_tracks_response.get(\"items\", []):\r\n           for artist in track[\"artists\"]:\r\n               all_artists.add(artist[\"id\"])\r\n\r\n\r\n       # Calculate new artists discovered\r\n       recent_artists = set()\r\n       for item in recent_tracks_response.get(\"items\", []):\r\n           for artist in item[\"track\"][\"artists\"]:\r\n               recent_artists.add(artist[\"id\"])\r\n\r\n\r\n       new_artists = recent_artists - all_artists\r\n\r\n\r\n       # Track-related metrics\r\n       all_tracks = set(track[\"id\"] for track in top_tracks_response.get(\"items\", []))\r\n\r\n\r\n       # Album-related metrics\r\n       all_albums = set(track[\"album\"][\"id\"] for track in top_tracks_response.get(\"items\", []))\r\n\r\n\r\n       # Location/Market metrics\r\n       all_markets = set()\r\n       for track in top_tracks_response.get(\"items\", []):\r\n           all_markets.update(track.get(\"available_markets\", []))\r\n\r\n\r\n       # Calculate listening time\r\n       total_listening_time = sum(\r\n           item[\"track\"][\"duration_ms\"]\r\n           for item in recent_tracks_response.get(\"items\", [])\r\n       )\r\n       listening_time_hours = round(total_listening_time / (1000 * 60 * 60), 2)\r\n\r\n\r\n       # Process top genres\r\n       genres = []\r\n       for artist in top_artists_response.get(\"items\", []):\r\n           genres.extend(artist.get(\"genres\", []))\r\n       top_genres = Counter(genres).most_common(5)\r\n\r\n       # Time range display names (updated to include seasonal options)\r\n       time_range_display = {\r\n           'short_term': 'Last 4 Weeks',\r\n           'medium_term': 'Last 6 Months',\r\n           'long_term': 'All Time',\r\n           'christmas': 'Christmas Season',\r\n           'halloween': 'Halloween Season'\r\n       }\r\n\r\n\r\n       # Structure the data for the frontend\r\n       wrapped_data = {\r\n           \"response\": response,\r\n           # Time range information\r\n           \"currentTimeRange\": time_range,\r\n           \"timeRangeDisplay\": time_range_display[time_range],\r\n           \"availableTimeRanges\": [\r\n               {'value': tr, 'display': time_range_display[tr]}\r\n               for tr in valid_ranges\r\n           ],\r\n\r\n\r\n           # Total counts\r\n           \"totalArtists\": len(all_artists),\r\n           \"totalTracks\": len(all_tracks),\r\n           \"totalAlbums\": len(all_albums),\r\n           \"totalLocations\": len(all_markets),\r\n           \"newArtistsCount\": len(new_artists),\r\n\r\n\r\n           # Listening statistics\r\n           \"listeningTimeHours\": listening_time_hours,\r\n           \"topGenres\": [{\"name\": genre, \"count\": count} for genre, count in top_genres],\r\n\r\n\r\n           # Top Artists\r\n           \"topArtists\": [\r\n               {\r\n                   \"name\": artist[\"name\"],\r\n                   \"subtitle\": \", \".join(artist.get(\"genres\", [])[:2]),\r\n                   \"image\": artist[\"images\"][0][\"url\"] if artist.get(\"images\") else None,\r\n                   \"popularity\": artist.get(\"popularity\", 0),\r\n                   \"genres\": artist.get(\"genres\", []),\r\n                   \"spotifyUrl\": artist[\"external_urls\"][\"spotify\"]\r\n               }\r\n               for artist in top_artists_response.get(\"items\", [])[:5]\r\n           ],\r\n\r\n\r\n           # Top Tracks\r\n           \"topTracks\": [\r\n               {\r\n                   \"name\": track[\"name\"],\r\n                   \"subtitle\": \", \".join(artist[\"name\"] for artist in track[\"artists\"]),\r\n                   \"image\": track[\"album\"][\"images\"][0][\"url\"] if track[\"album\"].get(\"images\") else None,\r\n                   \"popularity\": track.get(\"popularity\", 0),\r\n                   \"previewUrl\": track.get(\"preview_url\"),\r\n                   \"spotifyUrl\": track[\"external_urls\"][\"spotify\"],\r\n                   \"albumName\": track[\"album\"][\"name\"],\r\n                   \"duration\": track[\"duration_ms\"]\r\n               }\r\n               for track in top_tracks_response.get(\"items\", [])[:5]\r\n           ],\r\n\r\n\r\n           # Top Albums (unchanged)\r\n           \"topAlbums\": [\r\n                {\r\n                    \"name\": track[\"album\"][\"name\"],\r\n                    \"subtitle\": track[\"album\"][\"artists\"][0][\"name\"],\r\n                    \"image\": track[\"album\"][\"images\"][0][\"url\"] if track[\"album\"].get(\"images\") else None,\r\n                    \"releaseDate\": track[\"album\"].get(\"release_date\"),\r\n                    \"totalTracks\": track[\"album\"].get(\"total_tracks\"),\r\n                    \"spotifyUrl\": track[\"album\"][\"external_urls\"][\"spotify\"]\r\n                }\r\n                for track in top_tracks_response.get(\"items\", [])\r\n                if track[\"album\"][\"id\"] in all_albums and not all_albums.remove(track[\"album\"][\"id\"])\r\n            ][:5],\r\n\r\n\r\n\r\n           # Top Locations\r\n           \"topLocations\": [\r\n               {\r\n                   \"name\": market,\r\n                   \"count\": len([\r\n                       track for track in top_tracks_response.get(\"items\", [])\r\n                       if market in track.get(\"available_markets\", [])\r\n                   ])\r\n               }\r\n               for market in list(all_markets)[:5]\r\n           ],\r\n\r\n\r\n           # User Profile\r\n           \"userProfile\": {\r\n               \"name\": profile_response.get(\"display_name\"),\r\n               \"image\": profile_response.get(\"images\", [{}])[0].get(\"url\") if profile_response.get(\"images\") else None,\r\n               \"country\": profile_response.get(\"country\"),\r\n               \"product\": profile_response.get(\"product\"),\r\n               \"followersCount\": profile_response.get(\"followers\", {}).get(\"total\", 0)\r\n           }\r\n\r\n\r\n       }\r\n\r\n\r\n       wrapped_data['sharing'] = self.generate_sharing_data(wrapped_data, request)\r\n       wrapped_data['availableTimeRanges'] = [\r\n           {'value': tr, 'display': time_range_display[tr]}\r\n           for tr in valid_ranges\r\n       ]\r\n\r\n       if request.user.is_authenticated:\r\n           # Save the data to the database\r\n           wrap = SpotifyWrapped.objects.create(\r\n               user=request.user,\r\n               time_range=wrapped_data[\"currentTimeRange\"],\r\n               total_artists=wrapped_data[\"totalArtists\"],\r\n               total_tracks=wrapped_data[\"totalTracks\"],\r\n               total_albums=wrapped_data[\"totalAlbums\"],\r\n               total_locations=wrapped_data[\"totalLocations\"],\r\n               new_artists_count=wrapped_data[\"newArtistsCount\"],\r\n               listening_time_hours=wrapped_data[\"listeningTimeHours\"],\r\n               top_genres=wrapped_data[\"topGenres\"],\r\n               top_artists=wrapped_data[\"topArtists\"],\r\n               top_tracks=wrapped_data[\"topTracks\"],\r\n               top_albums=wrapped_data[\"topAlbums\"],\r\n               top_locations=wrapped_data[\"topLocations\"],\r\n               user_profile=wrapped_data[\"userProfile\"]\r\n           )\r\n\r\n\r\n       # Return JSON for API consumption\r\n       if request.headers.get('Accept') == 'application/json':\r\n           return JsonResponse(wrapped_data, encoder=DjangoJSONEncoder)\r\n\r\n\r\n       # Otherwise render the template\r\n       return render(request, \"wrapped.html\", {\r\n           \"wrapped_data\": wrapped_data,\r\n           \"wrap\": wrap,\r\n           \"page_title\": f\"Your Spotify Wrapped - {time_range_display[time_range]}\",\r\n           \"current_year\": datetime.now().year,\r\n           \"request\": request  # Pass request to template for building absolute URLs\r\n       })\r\n\r\n\r\n   def generate_sharing_data(self, wrapped_data, request):\r\n       \"\"\"Generate sharing text and URLs for social media platforms\"\"\"\r\n\r\n\r\n       # Base sharing text\r\n       share_text = (\r\n           f\"\uD83C\uDFB5 My Spotify Wrapped Stats:\\n\"\r\n           f\"• {wrapped_data['listeningTimeHours']} hours of music\\n\"\r\n           f\"• Top Artist: {wrapped_data['topArtists'][0]['name']}\\n\"\r\n           f\"• Top Track: {wrapped_data['topTracks'][0]['name']}\\n\"\r\n           f\"• {wrapped_data['totalArtists']} different artists\\n\"\r\n           f\"#SpotifyWrapped\"\r\n       )\r\n\r\n\r\n       # Get the current page's URL\r\n       current_url = request.build_absolute_uri()\r\n\r\n\r\n       # Generate platform-specific sharing URLs\r\n       sharing_data = {\r\n           'twitter': {\r\n               'url': f\"https://twitter.com/intent/tweet?text={urllib.parse.quote(share_text)}\"\r\n           },\r\n           'linkedin': {\r\n               'url': f\"https://www.linkedin.com/feed/?shareActive=true&text={share_text}%23NewPost\"\r\n\r\n           },\r\n       }\r\n       print(sharing_data)\r\n       return sharing_data\r\n\r\n    \r\n\r\nfrom django.shortcuts import render\r\nfrom django.shortcuts import render, redirect\r\nfrom .models import SpotifyWrapped\r\n\r\nfrom django.shortcuts import render\r\nfrom .models import SpotifyWrapped\r\n\r\ndef savedwraps(request):\r\n    # Fetch all saved SpotifyWrapped data for the logged-in user\r\n    wraps = SpotifyWrapped.objects.filter(user=request.user).order_by('-created_at')\r\n\r\n    # Structure the data to pass into the template\r\n    context = {\r\n        'wraps': wraps,\r\n        'page_title': 'Your Saved Spotify Wrapped'\r\n    }\r\n\r\n    return render(request, \"savedwraps.html\", context)\r\n\r\ndef wrap_detail(request, id):\r\n    # Get the SpotifyWrapped entry based on the provided id\r\n    wrap = get_object_or_404(SpotifyWrapped, id=id)\r\n\r\n    # Create context with the data for the selected wrap\r\n    context = {\r\n        'wrap': wrap,\r\n        'page_title': f\"Details for {wrap.time_range.capitalize()} Wrapped\"\r\n    }\r\n\r\n    # Render the 'wrap_detail.html' template with the context\r\n    return render(request, \"wrap_detail.html\", context)\r\n\r\nclass SpotifyWrappedOverviewView(APIView):\r\n    def get(self, request, format=None):\r\n        # Ensure the user is authenticated\r\n        if not request.user.is_authenticated:\r\n            return redirect('login')  # Redirect to the login page if not logged in\r\n\r\n        key = self.request.session.session_key\r\n        time_range = request.GET.get('time_range', 'medium_term')\r\n        valid_ranges = ['short_term', 'medium_term', 'long_term']\r\n        time_range_display = {'short_term': 'Last 4 Weeks', 'medium_term': 'Last 6 Months', 'long_term': 'All Time'}\r\n\r\n        if time_range not in valid_ranges:\r\n            time_range = 'medium_term'\r\n\r\n        # Fetch general stats from the session or cached endpoints\r\n        top_artists_endpoint = f\"me/top/artists?time_range={time_range}&limit=50\"\r\n        top_tracks_endpoint = f\"me/top/tracks?time_range={time_range}&limit=50\"\r\n        top_artists_response = spotify_requests_execution(key, top_artists_endpoint)\r\n        top_tracks_response = spotify_requests_execution(key, top_tracks_endpoint)\r\n\r\n        all_artists = {artist[\"id\"] for artist in top_artists_response.get(\"items\", [])}\r\n        all_tracks = {track[\"id\"] for track in top_tracks_response.get(\"items\", [])}\r\n        all_albums = {track[\"album\"][\"id\"] for track in top_tracks_response.get(\"items\", [])}\r\n\r\n        genres = []\r\n        for artist in top_artists_response.get(\"items\", []):\r\n            genres.extend(artist.get(\"genres\", []))\r\n        top_genres = Counter(genres).most_common(5)\r\n\r\n        wrapped_data = {\r\n            \"currentTimeRange\": time_range,\r\n            \"timeRangeDisplay\": time_range_display[time_range],\r\n            \"availableTimeRanges\": [{'value': tr, 'display': time_range_display[tr]} for tr in valid_ranges],\r\n            \"totalArtists\": len(all_artists),\r\n            \"totalTracks\": len(all_tracks),\r\n            \"totalAlbums\": len(all_albums),\r\n            \"topGenres\": [{\"name\": genre, \"count\": count} for genre, count in top_genres],\r\n        }\r\n\r\n        wraps = SpotifyWrapped.objects.filter(user=request.user).order_by('-created_at')\r\n\r\n        return render(request, \"wrapped_overview.html\", {\r\n            \"wrapped_data\": wrapped_data,\r\n            \"wraps\": wraps,\r\n            \"time_range\": time_range,\r\n            \"page_title\": \"Your Spotify Wrapped Overview\"\r\n        })\r\n\r\nimport logging\r\nfrom django.shortcuts import render\r\nfrom rest_framework.views import APIView\r\n\r\nlogger = logging.getLogger(__name__)\r\nclass SpotifyWrappedGenAIView(APIView):\r\n    def get(self, request, format=None):\r\n        # Get the session key for the request\r\n        key = self.request.session.session_key\r\n\r\n        # Get time range from query parameters, default to medium_term\r\n        time_range = request.GET.get('time_range', 'medium_term')\r\n\r\n        # Validate time range\r\n        valid_ranges = ['short_term', 'medium_term', 'long_term']\r\n        if time_range not in valid_ranges:\r\n            logger.warning(f\"Invalid time range: {time_range}. Defaulting to 'medium_term'.\")\r\n            time_range = 'medium_term'\r\n\r\n        try:\r\n            # Fetch top tracks data from Spotify API\r\n            top_tracks_endpoint = f\"me/top/tracks?time_range={time_range}&limit=50\"\r\n            top_tracks_response = spotify_requests_execution(key, top_tracks_endpoint)\r\n\r\n            # Extract top song names and their artists\r\n            top_songs_and_artists = [\r\n                f\"{track['name']} by {', '.join(artist['name'] for artist in track['artists'])}\"\r\n                for track in top_tracks_response.get(\"items\", [])[:5]\r\n            ]\r\n            top_songs_and_artists_str = \"; \".join(top_songs_and_artists)\r\n\r\n            # Configure GenAI\r\n            import google.generativeai as genai\r\n            genai.configure(api_key=API_KEY)\r\n            model = genai.GenerativeModel(\"gemini-1.5-flash\")\r\n\r\n            # Generate dynamic description based on top songs and artists\r\n            response = model.generate_content(\r\n                f\"Dynamically describe how someone who listens to my kind of music tends to act/think/dress. \"\r\n                f\"These are my top songs and artists: {top_songs_and_artists_str}. Limit the response to less than 100 words.\"\r\n            )\r\n\r\n            # Process the GenAI response\r\n            wrapped_data = {\r\n                \"genaiResponse\": response.text,\r\n                \"topSongsAndArtists\": top_songs_and_artists\r\n            }\r\n\r\n            logger.info(f\"Successfully generated GenAI response for top tracks\")\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Error generating GenAI response: {str(e)}\")\r\n            wrapped_data = {\r\n                \"genaiResponse\": \"Unable to generate description.\",\r\n                \"topSongsAndArtists\": []\r\n            }\r\n\r\n        # Render the template with the data\r\n        return render(request, \"wrapped_genai.html\", {\r\n            \"wrapped_data\": wrapped_data,\r\n            \"page_title\": \"Your Music Personality\",\r\n            \"time_range\": time_range\r\n        })\r\n\r\n\r\nclass SpotifyWrappedArtistsView(APIView):\r\n    def get(self, request, format=None):\r\n        # Get the session key for the request\r\n        key = self.request.session.session_key\r\n\r\n        # Get time range from query parameters, default to medium_term\r\n        time_range = request.GET.get('time_range', 'medium_term')\r\n\r\n        # Validate time range\r\n        valid_ranges = ['short_term', 'medium_term', 'long_term']\r\n        if time_range not in valid_ranges:\r\n            logger.warning(f\"Invalid time range: {time_range}. Defaulting to 'medium_term'.\")\r\n            time_range = 'medium_term'\r\n\r\n        # Fetch top artists data from Spotify API\r\n        top_artists_endpoint = f\"me/top/artists?time_range={time_range}&limit=50\"\r\n\r\n        try:\r\n            # Call the function that interacts with the Spotify API\r\n            top_artists_response = spotify_requests_execution(key, top_artists_endpoint)\r\n            logger.info(f\"Fetched top artists for time range: {time_range}\")\r\n\r\n            # Process top artists data\r\n            wrapped_data = {\r\n                \"topArtists\": [\r\n                    {\r\n                        \"name\": artist[\"name\"],\r\n                        \"subtitle\": \", \".join(artist.get(\"genres\", [])[:2]),  # Displaying up to 2 genres\r\n                        \"image\": artist[\"images\"][0][\"url\"] if artist.get(\"images\") else None,\r\n                        \"popularity\": artist.get(\"popularity\", 0),\r\n                        \"spotifyUrl\": artist[\"external_urls\"][\"spotify\"]\r\n                    }\r\n                    for artist in top_artists_response.get(\"items\", [])[:5]  # Limit to top 5 artists\r\n                ]\r\n            }\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Error fetching top artists: {str(e)}\")\r\n            wrapped_data = {\"topArtists\": []}\r\n\r\n        # Render the template with the data\r\n        return render(request, \"wrapped_artists.html\", {\r\n            \"wrapped_data\": wrapped_data,\r\n            \"page_title\": \"Your Top Artists\",\r\n            \"time_range\": time_range  # Ensure time range is passed to the template\r\n        })\r\n\r\n\r\nclass SpotifyWrappedTracksView(APIView):\r\n    def get(self, request, format=None):\r\n        key = self.request.session.session_key\r\n        time_range = request.GET.get('time_range', 'medium_term')\r\n\r\n        top_tracks_endpoint = f\"me/top/tracks?time_range={time_range}&limit=50\"\r\n        top_tracks_response = spotify_requests_execution(key, top_tracks_endpoint)\r\n\r\n        wrapped_data = {\r\n            \"topTracks\": [\r\n                {\r\n                    \"name\": track[\"name\"],\r\n                    \"subtitle\": \", \".join(artist[\"name\"] for artist in track[\"artists\"]),\r\n                    \"image\": track[\"album\"][\"images\"][0][\"url\"] if track[\"album\"].get(\"images\") else None,\r\n                    \"albumName\": track[\"album\"][\"name\"],\r\n                    \"spotifyUrl\": track[\"external_urls\"][\"spotify\"],\r\n                    \"preview_url\": track[\"preview_url\"],  # Include preview URL\r\n                }\r\n                for track in top_tracks_response.get(\"items\", [])[:5]\r\n            ]\r\n        }\r\n\r\n        return render(request, \"wrapped_tracks.html\", {\"wrapped_data\": wrapped_data, 'time_range': time_range, \"page_title\": \"Your Top Tracks\"})\r\n\r\nclass SpotifyWrappedAlbumsView(APIView):\r\n    def get(self, request, format=None):\r\n        key = self.request.session.session_key\r\n        time_range = request.GET.get('time_range', 'medium_term')\r\n\r\n        top_tracks_endpoint = f\"me/top/tracks?time_range={time_range}&limit=50\"\r\n        top_tracks_response = spotify_requests_execution(key, top_tracks_endpoint)\r\n\r\n        seen_albums = set()\r\n        wrapped_data = {\r\n            \"topAlbums\": [\r\n                 {\r\n                     \"name\": track[\"album\"][\"name\"],\r\n                     \"subtitle\": track[\"album\"][\"artists\"][0][\"name\"],\r\n                     \"image\": track[\"album\"][\"images\"][0][\"url\"] if track[\"album\"].get(\"images\") else None,\r\n                     \"spotifyUrl\": track[\"album\"][\"external_urls\"][\"spotify\"]\r\n                 }\r\n                 for track in top_tracks_response.get(\"items\", [])\r\n                 if track[\"album\"][\"id\"] not in seen_albums and not seen_albums.add(track[\"album\"][\"id\"])\r\n             ][:5]\r\n        }\r\n\r\n        return render(request, \"wrapped_albums_locations.html\", {\"wrapped_data\": wrapped_data, 'time_range': time_range, \"page_title\": \"Your Top Albums\"})\r\n\r\n\r\n\r\nfrom collections import Counter\r\nfrom django.shortcuts import render\r\nfrom rest_framework.views import APIView # Assuming spotify_requests_execution is a utility function\r\n\r\nclass SpotifyWrappedProfileView(APIView):\r\n    def get(self, request, *args, **kwargs):\r\n        key = self.request.session.session_key\r\n        time_range = request.GET.get('time_range', 'medium_term')\r\n\r\n        # Configure the API key for the genai module\r\n        # Get time range from query parameters, default to medium_ter\r\n\r\n        # Validate time range\r\n        valid_ranges = ['short_term', 'medium_term', 'long_term']\r\n        if time_range not in valid_ranges:\r\n            time_range = 'medium_term'\r\n\r\n        # Fetch all necessary data from Spotify API with selected time range\r\n        # 1. Top Artists\r\n        top_artists_endpoint = f\"me/top/artists?time_range={time_range}&limit=50\"\r\n        top_artists_response = spotify_requests_execution(key, top_artists_endpoint)\r\n\r\n        # 2. Top Tracks\r\n        top_tracks_endpoint = f\"me/top/tracks?time_range={time_range}&limit=50\"\r\n        top_tracks_response = spotify_requests_execution(key, top_tracks_endpoint)\r\n\r\n        # 3. Recently played tracks (this endpoint doesn't use time_range)\r\n        recent_tracks_endpoint = \"me/player/recently-played?limit=50\"\r\n        recent_tracks_response = spotify_requests_execution(key, recent_tracks_endpoint)\r\n\r\n        # 4. Get user's playlists\r\n        playlists_endpoint = \"me/playlists\"\r\n        playlists_response = spotify_requests_execution(key, playlists_endpoint)\r\n\r\n        # 5. Get user profile\r\n        profile_endpoint = \"me\"\r\n        profile_response = spotify_requests_execution(key, profile_endpoint)\r\n        # Extract top song names and their artists\r\n        '''model = genai.GenerativeModel(\"gemini-1.5-flash\")\r\n        top_songs_and_artists = [\r\n            f\"{track['name']} by {', '.join(artist['name'] for artist in track['artists'])}\"\r\n            for track in top_tracks_response.get(\"items\", [])[:5]\r\n        ]\r\n        top_songs_and_artists_str = \"; \".join(top_songs_and_artists)\r\n\r\n        # Generate dynamic description based on top songs and artists\r\n        response = model.generate_content(\r\n            f\"Dynamically describe how someone who listens to my kind of music tends to act/think/dress. \"\r\n            f\"These are my top songs and artists: {top_songs_and_artists_str}.\"\r\n        )'''\r\n        # Process the data\r\n        all_artists = set()\r\n        for artist in top_artists_response.get(\"items\", []):\r\n            all_artists.add(artist[\"id\"])\r\n\r\n        for track in top_tracks_response.get(\"items\", []):\r\n            for artist in track[\"artists\"]:\r\n                all_artists.add(artist[\"id\"])\r\n\r\n        # Calculate new artists discovered\r\n        recent_artists = set()\r\n        for item in recent_tracks_response.get(\"items\", []):\r\n            for artist in item[\"track\"][\"artists\"]:\r\n                recent_artists.add(artist[\"id\"])\r\n\r\n        new_artists = recent_artists - all_artists\r\n\r\n        # Track-related metrics\r\n        all_tracks = set(track[\"id\"] for track in top_tracks_response.get(\"items\", []))\r\n\r\n        # Album-related metrics\r\n        all_albums = set(track[\"album\"][\"id\"] for track in top_tracks_response.get(\"items\", []))\r\n\r\n        # Location/Market metrics\r\n        all_markets = set()\r\n        for track in top_tracks_response.get(\"items\", []):\r\n            all_markets.update(track.get(\"available_markets\", []))\r\n\r\n        # Calculate listening time\r\n        total_listening_time = sum(\r\n            item[\"track\"][\"duration_ms\"]\r\n            for item in recent_tracks_response.get(\"items\", [])\r\n        )\r\n        listening_time_hours = round(total_listening_time / (1000 * 60 * 60), 2)\r\n\r\n        # Process top genres\r\n        genres = []\r\n        for artist in top_artists_response.get(\"items\", []):\r\n            genres.extend(artist.get(\"genres\", []))\r\n        top_genres = Counter(genres).most_common(5)\r\n\r\n        # Time range display names\r\n        time_range_display = {\r\n            'short_term': 'Last 4 Weeks',\r\n            'medium_term': 'Last 6 Months',\r\n            'long_term': 'All Time'\r\n        }\r\n\r\n        # Structure the data for the frontend\r\n        wrapped_data = {\r\n            # Time range information\r\n            \"currentTimeRange\": time_range,\r\n            \"timeRangeDisplay\": time_range_display[time_range],\r\n            \"availableTimeRanges\": [\r\n                {'value': tr, 'display': time_range_display[tr]}\r\n                for tr in valid_ranges\r\n            ],\r\n\r\n            # Total counts\r\n            \"totalArtists\": len(all_artists),\r\n            \"totalTracks\": len(all_tracks),\r\n            \"totalAlbums\": len(all_albums),\r\n            \"totalLocations\": len(all_markets),\r\n            \"newArtistsCount\": len(new_artists),\r\n\r\n            # Listening statistics\r\n            \"listeningTimeHours\": listening_time_hours,\r\n            \"topGenres\": [{\"name\": genre, \"count\": count} for genre, count in top_genres],\r\n        }\r\n\r\n        # Time range display names\r\n\r\n        time_range_display = {\r\n            'short_term': 'Last 4 Weeks',\r\n            'medium_term': 'Last 6 Months',\r\n            'long_term': 'All Time'\r\n        }\r\n        return render(request, \"wrapped_profile.html\",{\"wrapped_data\": wrapped_data, 'time_range': time_range, \"page_title\": \"Your Spotify Profile\"})\r\n\r\n\r\nfrom django.shortcuts import render\r\nfrom django.http import JsonResponse\r\nimport requests\r\n\r\nclass TopLocationsView(APIView):\r\n    def get(self, request, format=None):\r\n        key = self.request.session.session_key\r\n        time_range = request.GET.get('time_range', 'medium_term')\r\n\r\n        valid_ranges = ['short_term', 'medium_term', 'long_term']\r\n        if time_range not in valid_ranges:\r\n            time_range = 'medium_term'\r\n\r\n        # Fetch Top Tracks data directly\r\n        top_tracks_endpoint = f\"https://api.spotify.com/v1/me/top/tracks?time_range={time_range}&limit=50\"\r\n        headers = {'Authorization': f'Bearer {key}'}\r\n        top_tracks_response = requests.get(top_tracks_endpoint, headers=headers).json()\r\n\r\n        # Process top locations (markets)\r\n        all_markets = set()\r\n        for track in top_tracks_response.get(\"items\", []):\r\n            all_markets.update(track.get(\"available_markets\", []))\r\n\r\n        # Get the top locations (markets)\r\n        top_locations = [\r\n            {\r\n                \"name\": market,\r\n                \"count\": len([track for track in top_tracks_response.get(\"items\", []) if market in track.get(\"available_markets\", [])])\r\n            }\r\n            for market in list(all_markets)[:5]\r\n        ]\r\n\r\n        # Log data for debugging\r\n        print(\"Wrapped Data:\", {\r\n            \"timeRangeDisplay\": {'short_term': 'Last 4 Weeks', 'medium_term': 'Last 6 Months', 'long_term': 'All Time'}[time_range],\r\n            \"topLocations\": top_locations\r\n        })\r\n\r\n        # Structure the data for the frontend\r\n        wrapped_data = {\r\n            \"timeRangeDisplay\": {'short_term': 'Last 4 Weeks', 'medium_term': 'Last 6 Months', 'long_term': 'All Time'}[time_range],\r\n            \"topLocations\": top_locations\r\n        }\r\n\r\n        # Return JSON or render template\r\n        if request.headers.get('Accept') == 'application/json':\r\n            return JsonResponse(wrapped_data)\r\n\r\n        return render(request, \"top_locations.html\", {\"wrapped_data\": wrapped_data})\r\n\r\n\r\nclass TopGenresView(APIView):\r\n    def get(self, request, format=None):\r\n        key = self.request.session.session_key\r\n        time_range = request.GET.get('time_range', 'medium_term')\r\n\r\n        valid_ranges = ['short_term', 'medium_term', 'long_term']\r\n        if time_range not in valid_ranges:\r\n            time_range = 'medium_term'\r\n\r\n        # Fetch Top Artists data\r\n        top_artists_endpoint = f\"me/top/artists?time_range={time_range}&limit=50\"\r\n        top_artists_response = spotify_requests_execution(key, top_artists_endpoint)\r\n\r\n        # Process top genres\r\n        genres = []\r\n        for artist in top_artists_response.get(\"items\", []):\r\n            genres.extend(artist.get(\"genres\", []))\r\n        top_genres = Counter(genres).most_common(5)\r\n\r\n        # Structure the data for the frontend\r\n        wrapped_data = {\r\n            \"timeRangeDisplay\": {'short_term': 'Last 4 Weeks', 'medium_term': 'Last 6 Months', 'long_term': 'All Time'}[\r\n                time_range],\r\n            \"topGenres\": [{\"name\": genre, \"count\": count} for genre, count in top_genres]\r\n        }\r\n\r\n        # Return JSON or render template\r\n        if request.headers.get('Accept') == 'application/json':\r\n            return JsonResponse(wrapped_data)\r\n\r\n        return render(request, \"top_genres.html\", {\"wrapped_data\": wrapped_data})\r\n\r\n\r\nprint(\"dablt\")\r\n\r\n# Connect to the SQLite database\r\nconn = sqlite3.connect('db.sqlite3')  # Replace with the correct path if needed\r\ncursor = conn.cursor()\r\n\r\n# Get the list of all table names in the database\r\ncursor.execute(\"SELECT name FROM sqlite_master WHERE type='table';\")\r\ntables = cursor.fetchall()\r\n\r\n# Iterate through each table and display its contents\r\nfor table in tables:\r\n    table_name = table[0]\r\n    print(f\"Displaying data from table: {table_name}\")\r\n\r\n    try:\r\n        # Query to select everything from the current table\r\n        cursor.execute(f\"SELECT * FROM {table_name}\")\r\n\r\n        # Fetch all rows from the table\r\n        rows = cursor.fetchall()\r\n\r\n        # If the table is empty, print a message\r\n        if not rows:\r\n            print(f\"Table {table_name} is empty.\")\r\n        else:\r\n            # Print each row in the table\r\n            for row in rows:\r\n                print(row)\r\n\r\n    except sqlite3.Error as e:\r\n        # Handle the case where a table can't be queried\r\n        print(f\"Error querying table {table_name}: {e}\")\r\n\r\n    print(\"\\n\" + \"-\" * 50 + \"\\n\")\r\n\r\n\r\nclass PostListView(ListView):\r\n    model = Social\r\n    template_name = 'post_list.html'\r\n    context_object_name = 'post_list'\r\n    ordering = ['-created_on']\r\n\r\n\r\ndef post_wrap_to_website(request, wrap_id):\r\n    # Get the SpotifyWrapped object for the current user\r\n    wrap = get_object_or_404(SpotifyWrapped, id=wrap_id, user=request.user)\r\n\r\n    # Copy the data to a new Post object\r\n    Social.objects.create(\r\n        user=request.user,\r\n        time_range=wrap.time_range,\r\n        total_artists=wrap.total_artists,\r\n        total_tracks=wrap.total_tracks,\r\n        total_albums=wrap.total_albums,\r\n        total_locations=wrap.total_locations,\r\n        new_artists_count=wrap.new_artists_count,\r\n        listening_time_hours=wrap.listening_time_hours,\r\n        top_genres=wrap.top_genres,\r\n        top_artists=wrap.top_artists,\r\n        top_tracks=wrap.top_tracks,\r\n        top_albums=wrap.top_albums,\r\n        top_locations=wrap.top_locations,\r\n        user_profile=wrap.user_profile,\r\n    )\r\n\r\n    # Add a success message and redirect to the posts page\r\n    messages.success(request, \"Your Spotify Wrapped data has been posted!\")\r\n    socials_list = Social.objects.all()\r\n    context = {\r\n        'socials_list': socials_list,  # Pass the list to the template\r\n    }\r\n    return render(request, 'post_list.html', context)  # Ensure 'post_list' matches the URL name for your posts page\r\n# Close the connection when done\r\nconn.close()\r\n\r\n\r\ndef saved_spotify_wrapped_artists(request, id):\r\n    user = request.user\r\n\r\n    # Get the specific wrap by id\r\n    wrap = get_object_or_404(SpotifyWrapped, id=id, user=user)\r\n\r\n    # Render the wrapped_profile.html template with the wrap context\r\n    return render(request, \"saved_artists.html\", {\r\n        \"wrap\": wrap,\r\n        \"page_title\": \"Your Saved Spotify Profile\",\r\n    })\r\n\r\n\r\n\r\ndef saved_spotify_wrapped_tracks(request, id):\r\n    user = request.user\r\n\r\n    # Get the specific wrap by id\r\n    wrap = get_object_or_404(SpotifyWrapped, id=id, user=user)\r\n\r\n    # Render the wrapped_profile.html template with the wrap context\r\n    return render(request, \"saved_tracks.html\", {\r\n        \"wrap\": wrap,\r\n        \"page_title\": \"Your Saved Spotify Profile\",\r\n    })\r\n\r\n\r\ndef saved_spotify_wrapped_albums(request, id):\r\n    user = request.user\r\n\r\n    # Get the specific wrap by id\r\n    wrap = get_object_or_404(SpotifyWrapped, id=id, user=user)\r\n\r\n    # Render the wrapped_profile.html template with the wrap context\r\n    return render(request, \"saved_albums.html\", {\r\n        \"wrap\": wrap,\r\n        \"page_title\": \"Your Saved Spotify Profile\",\r\n    })\r\n\r\n\r\ndef saved_spotify_wrapped_profile(request, id):\r\n    user = request.user\r\n\r\n    # Get the specific wrap by id\r\n    wrap = get_object_or_404(SpotifyWrapped, id=id, user=user)\r\n\r\n    # Render the wrapped_profile.html template with the wrap context\r\n    return render(request, \"saved_profile.html\", {\r\n        \"wrap\": wrap,\r\n        \"page_title\": \"Your Saved Spotify Profile\",\r\n    })\r\n\r\ndef WebsiteSocial(request):\r\n    socials_list = Social.objects.all()\r\n    context = {\r\n        'socials_list': socials_list,  # Pass the list to the template\r\n    }\r\n    return render(request, 'post_list.html', context)  # Ensure 'post_list' matches the URL name for your posts page\r\ndef delete_social(request, id):\r\n    try:\r\n        wrap = Social.objects.get(id=id, user=request.user)\r\n    except Social.DoesNotExist:\r\n        raise Http404(\"Social data not found.\")\r\n\r\n    # Delete the wrap\r\n    wrap.delete()\r\n\r\n    # Re-render the updated list\r\n    socials_list = Social.objects.all()\r\n    context = {\r\n        'socials_list': socials_list,\r\n    }\r\n    return render(request, 'post_list.html', context)\r\ndef contact_developers(request):\r\n    return render(request, 'contact.html')\r\ndef delete_spotify_wrap(request, id):\r\n    try:\r\n        wrap = SpotifyWrapped.objects.get(id=id, user=request.user)\r\n    except SpotifyWrapped.DoesNotExist:\r\n        raise Http404(\"Spotify Wrapped data not found.\")\r\n\r\n        # Delete the wrap\r\n    wrap.delete()\r\n\r\n    # Redirect back to the list of wraps\r\n    return redirect('wrapped_intro')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Api/views.py b/Api/views.py
--- a/Api/views.py	(revision 7dc37191b2a0ed5822185c481ee1ee6770fa5d9c)
+++ b/Api/views.py	(date 1733100594805)
@@ -28,14 +28,17 @@
 from rest_framework.views import APIView
 from .models import SpotifyWrapped, Social
 from django.views.generic import ListView
+from django.contrib.admin.views.decorators import staff_member_required
+from .models import ContactRequest
 from .models import Social
 #import google.generativeai as genai
 import google.generativeai as genai
 from django.core.mail import send_mail
 import os
-from django.shortcuts import render  # Assuming the function is in utils.py
 
-from django.shortcuts import render, redirect
+import smtplib
+from django.core.mail.backends.smtp import EmailBackend
+
 
 
 def home(request):
@@ -61,20 +64,21 @@
 
 
 def contact_view(request):
-    success_message = None
-
+    success_message = ""
     if request.method == 'POST':
         # Get data from the form
         name = request.POST.get('name')
         email = request.POST.get('email')
         message = request.POST.get('message')
+        ContactRequest.objects.create(name=name, email=email, message=message)
 
         # Example: Send email (or handle the message)
         send_mail(
             f"Message from {name}",
             message,
             email,
-            ['developer@example.com'],  # Replace with your email
+            ['aishbal25@gmail.com'],  # Replace with your email
+
         )
 
         # Display success message
@@ -82,6 +86,10 @@
 
     return render(request, 'contact.html', {'success_message': success_message})
 
+
+
+
+
 class Authentication(APIView):
     permission_classes = [IsAuthenticated]
     def get(self, request, format=None):
@@ -1182,41 +1190,8 @@
         return render(request, "top_genres.html", {"wrapped_data": wrapped_data})
 
 
-print("dablt")
-
-# Connect to the SQLite database
-conn = sqlite3.connect('db.sqlite3')  # Replace with the correct path if needed
-cursor = conn.cursor()
-
-# Get the list of all table names in the database
-cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
-tables = cursor.fetchall()
-
-# Iterate through each table and display its contents
-for table in tables:
-    table_name = table[0]
-    print(f"Displaying data from table: {table_name}")
-
-    try:
-        # Query to select everything from the current table
-        cursor.execute(f"SELECT * FROM {table_name}")
 
-        # Fetch all rows from the table
-        rows = cursor.fetchall()
 
-        # If the table is empty, print a message
-        if not rows:
-            print(f"Table {table_name} is empty.")
-        else:
-            # Print each row in the table
-            for row in rows:
-                print(row)
-
-    except sqlite3.Error as e:
-        # Handle the case where a table can't be queried
-        print(f"Error querying table {table_name}: {e}")
-
-    print("\n" + "-" * 50 + "\n")
 
 
 class PostListView(ListView):
@@ -1256,7 +1231,6 @@
     }
     return render(request, 'post_list.html', context)  # Ensure 'post_list' matches the URL name for your posts page
 # Close the connection when done
-conn.close()
 
 
 def saved_spotify_wrapped_artists(request, id):
Index: Api/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth.models import User\r\nfrom django.db import models\r\n\r\n# Create your models here\r\n\r\nclass Token(models.Model):\r\n    access_token = models.CharField(max_length=500)\r\n    refresh_token = models.CharField(max_length=500)\r\n    expires_in = models.DateTimeField()\r\n    user = models.CharField(max_length=50, unique=True)\r\n    token_type = models.CharField(max_length=50)\r\n    created_at = models.DateTimeField(auto_now_add=True)\r\n\r\n\r\nfrom django.db import models\r\nfrom django.contrib.auth.models import User\r\n\r\nfrom django.db import models\r\n\r\nfrom django.db import models\r\nfrom django.contrib.auth.models import User\r\n\r\nclass SpotifyWrapped(models.Model):\r\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='spotify_wraps')\r\n    time_range = models.CharField(max_length=20)  # e.g., 'short_term', 'medium_term', 'long_term'\r\n    total_artists = models.IntegerField()\r\n    total_tracks = models.IntegerField()\r\n    total_albums = models.IntegerField()\r\n    total_locations = models.IntegerField()\r\n    new_artists_count = models.IntegerField()\r\n    listening_time_hours = models.FloatField()\r\n    top_genres = models.JSONField()  # Store genres as a list of dictionaries\r\n    top_artists = models.JSONField()  # Store artists as a list of dictionaries\r\n    top_tracks = models.JSONField()  # Store tracks as a list of dictionaries\r\n    top_albums = models.JSONField()  # Store albums as a list of dictionaries\r\n    top_locations = models.JSONField()  # Store locations as a list of dictionaries\r\n    user_profile = models.JSONField()  # Store user profile details\r\n    created_at = models.DateTimeField(auto_now_add=True)\r\n\r\n    def __str__(self):\r\n        return f\"{self.user.username} - {self.time_range} Wrapped\"\r\n\r\nfrom django.utils import timezone\r\nfrom django.contrib.auth.models import User\r\n\r\n\r\nclass Social(models.Model):\r\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\r\n    time_range = models.CharField(max_length=20)\r\n    total_artists = models.IntegerField()\r\n    total_tracks = models.IntegerField()\r\n    total_albums = models.IntegerField()\r\n    total_locations = models.IntegerField()\r\n    new_artists_count = models.IntegerField()\r\n    listening_time_hours = models.FloatField()\r\n    top_genres = models.JSONField()\r\n    top_artists = models.JSONField()\r\n    top_tracks = models.JSONField()\r\n    top_albums = models.JSONField()\r\n    top_locations = models.JSONField()\r\n    user_profile = models.JSONField()\r\n    created_on = models.DateTimeField(auto_now_add=True)\r\n    likes = models.ManyToManyField(User, blank=True, related_name='likes')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Api/models.py b/Api/models.py
--- a/Api/models.py	(revision 7dc37191b2a0ed5822185c481ee1ee6770fa5d9c)
+++ b/Api/models.py	(date 1733100594805)
@@ -60,4 +60,14 @@
     top_locations = models.JSONField()
     user_profile = models.JSONField()
     created_on = models.DateTimeField(auto_now_add=True)
-    likes = models.ManyToManyField(User, blank=True, related_name='likes')
\ No newline at end of file
+    likes = models.ManyToManyField(User, blank=True, related_name='likes')
+
+
+class ContactRequest(models.Model):
+    name = models.CharField(max_length=100)
+    email = models.EmailField()
+    message = models.TextField()
+    submitted_at = models.DateTimeField(auto_now_add=True)
+
+    def __str__(self):
+        return f"{self.name} - {self.email}"
\ No newline at end of file
Index: Api/templates/contact.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends 'base.html' %}\r\n{% load static %}\r\n\r\n{% block title %}\r\n    Contact the Developers\r\n{% endblock %}\r\n\r\n{% block content %}\r\n    <head>\r\n        <style>\r\n\r\n\r\n            .contact-container {\r\n                max-width: 1200px;\r\n                margin: 0 auto;\r\n                padding: 20px;\r\n                flex-direction: column;\r\n                align-items: center;\r\n            }\r\n\r\n            .contact-title {\r\n                text-align: center;\r\n                font-size: 50px;\r\n                font-weight: bold;\r\n                color: #1db954; /* Default Spotify green color */\r\n                margin-bottom: 40px;\r\n            }\r\n\r\n\r\n\r\n            form {\r\n                display: flex;\r\n                flex-direction: column;\r\n            }\r\n\r\n            label {\r\n                font-weight: bold;\r\n                color: #1db954;\r\n            }\r\n\r\n            input, textarea {\r\n                width: 100%;\r\n                padding: 10px;\r\n                border: 1px solid #ccc;\r\n                border-radius: 5px;\r\n                font-size: 16px;\r\n            }\r\n\r\n            textarea {\r\n                font-family: Arial, sans-serif;\r\n                resize: vertical;\r\n            }\r\n\r\n            button {\r\n                padding: 10px;\r\n                background-color: #1db954;\r\n                color: #fff;\r\n                border: none;\r\n                border-radius: 5px;\r\n                font-size: 16px;\r\n                cursor: pointer;\r\n            }\r\n\r\n            button:hover {\r\n                background-color: #14833b;\r\n            }\r\n\r\n            .developer-sections-container {\r\n                display: flex;\r\n                flex-wrap: wrap;\r\n                gap: 20px;\r\n                justify-content: center;\r\n            }\r\n\r\n            .developer-section {\r\n                width: 100%;\r\n                max-width: 300px;\r\n                background-color: #fff;\r\n                padding: 20px;\r\n                border-radius: 10px;\r\n                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n                text-align: center;\r\n                transition: transform 0.3s ease-in-out;\r\n            }\r\n\r\n            .developer-section:hover {\r\n                transform: scale(1.05);\r\n            }\r\n\r\n            .developer-section img {\r\n                width: 120px;\r\n                height: 120px;\r\n                border-radius: 50%;\r\n                margin-bottom: 15px;\r\n            }\r\n\r\n            .developer-name {\r\n                font-size: 20px;\r\n                font-weight: bold;\r\n                color: #333;\r\n                margin-bottom: 5px;\r\n            }\r\n\r\n            .developer-position {\r\n                font-size: 18px;\r\n                color: #555;\r\n                margin-bottom: 15px;\r\n            }\r\n\r\n            .developer-bio {\r\n                font-size: 14px;\r\n                color: #666;\r\n                margin-bottom: 15px;\r\n            }\r\n\r\n            .contact-info {\r\n                font-size: 14px;\r\n                color: #1db954;\r\n            }\r\n\r\n            .contact-info a {\r\n                color: #1db954;\r\n                text-decoration: none;\r\n            }\r\n\r\n            .contact-info a:hover {\r\n                text-decoration: underline;\r\n            }\r\n\r\n            @media (max-width: 768px) {\r\n                .contact-title {\r\n                    font-size: 40px;\r\n                }\r\n\r\n                .form-container {\r\n                    width: 95%;\r\n                }\r\n\r\n                .developer-section {\r\n                    max-width: 100%;\r\n                }\r\n            }\r\n\r\n            /* Light Theme */\r\n            .light-theme .contact-title {\r\n                color: #1db954;\r\n            }\r\n            .light-theme .developer-section {\r\n                background-color: #f9f9f9;\r\n            }\r\n            .light-theme .developer-name,\r\n            .light-theme .developer-position,\r\n            .light-theme .developer-bio {\r\n                color: #333;\r\n            }\r\n            .light-theme .contact-info {\r\n                color: #1db954;\r\n            }\r\n\r\n            /* Dark Theme */\r\n            .dark-theme .contact-title {\r\n                color: #1db954;\r\n            }\r\n            .dark-theme .developer-section {\r\n                background-color: #444; /* Lighter background for sections */\r\n                color: #fff;\r\n            }\r\n            .dark-theme .developer-name,\r\n            .dark-theme .developer-position,\r\n            .dark-theme .developer-bio {\r\n                color: #ccc; /* Lighter text color */\r\n            }\r\n            .dark-theme .contact-info {\r\n                color: #1db954;\r\n            }\r\n\r\n            /* Blue Theme */\r\n            .blue-theme .contact-title {\r\n                color: #004085; /* Darker Blue for title */\r\n            }\r\n            .blue-theme .developer-section {\r\n                background-color: #f0f8ff;\r\n                color: #333;\r\n            }\r\n            .blue-theme .developer-name,\r\n            .blue-theme .developer-position,\r\n            .blue-theme .developer-bio {\r\n                color: #333;\r\n            }\r\n            .blue-theme .contact-info {\r\n                color: #1A5D8D; /* Link color set to Darker Blue */\r\n            }\r\n            .blue-theme .contact-info a {\r\n                color: #4682b4; /* Lighter, darker blue for links */\r\n            }\r\n            .blue-theme .contact-info a:hover {\r\n                text-decoration: underline;\r\n                color: #1A5D8D; /* Highlight on hover */\r\n            }\r\n\r\n            .blue-theme h2 {\r\n                color: #ffffff;\r\n                text-align: center;\r\n            }\r\n\r\n            .blue-theme button:hover {\r\n                background: #1e88e5;\r\n            }\r\n\r\n            .blue-theme button {\r\n                background : #1D9BF0;\r\n            }\r\n\r\n            .blue-theme label {\r\n                color : #004085;\r\n            }\r\n\r\n            .blue-theme\r\n        </style>\r\n        <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\r\n    </head>\r\n    <body>\r\n    <h1 class=\"contact-title\">Contact the Developers</h1>\r\n    <h2>Comments, questions, concerns? Send them to our team!</h2>\r\n    {% if success_message %}\r\n        <p style=\"color: green;\">{{ success_message }}</p>\r\n    {% endif %}\r\n    <div class = contact-container >\r\n    <form method=\"post\">\r\n        {% csrf_token %}\r\n        <label for=\"name\">Name:</label>\r\n        <input type=\"text\" id=\"name\" name=\"name\" required><br><br>\r\n\r\n        <label for=\"email\">Email:</label>\r\n        <input type=\"email\" id=\"email\" name=\"email\" required><br><br>\r\n\r\n        <label for=\"message\">Message:</label><br>\r\n        <textarea id=\"message\" name=\"message\" rows=\"5\" required></textarea><br><br>\r\n\r\n        <button type=\"submit\">Send</button>\r\n    </form>\r\n    </div>\r\n\r\n    <div class=\"contact-title\">Meet the Development Team</div>\r\n\r\n    <div class=\"developer-sections-container\">\r\n        <!-- Developer 1 -->\r\n        <div class=\"developer-section\">\r\n            <img src=\"https://media.licdn.com/dms/image/v2/D4E03AQFAAjD1XpA92g/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1726094880390?e=1738195200&v=beta&t=vsmOiJmz2_LuQUD5ahM0QWtQrEmhztn3OkFTCjvXBj4\" alt=\"Developer 1\">\r\n            <div class=\"developer-name\">Pranav Eega</div>\r\n            <div class=\"developer-position\">Scrum Master</div>\r\n            <div class=\"developer-bio\"></div>\r\n            <div class=\"contact-info\">\r\n                <p><strong>Email:</strong> <a href=\"mailto:eegapr1@gmail.com\">eegapr1@gmail.com</a></p>\r\n                <p><strong>LinkedIn:</strong> <a href=\"https://www.linkedin.com/in/pranav-eega-493260219/\" target=\"_blank\">https://www.linkedin.com/in/pranav-eega</a></p>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Developer 2 -->\r\n        <div class=\"developer-section\">\r\n            <img src=\"https://media.licdn.com/dms/image/v2/D4E03AQHrcpcn7jrWYQ/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1726095731754?e=1738195200&v=beta&t=Q93EQzios1c6ziTbni-hppF0zaN_UKiXomKzh7Gyxoo\" alt=\"Developer 2\">\r\n            <div class=\"developer-name\">Adithya Rajesh</div>\r\n            <div class=\"developer-position\">Product Owner</div>\r\n            <div class=\"developer-bio\"></div>\r\n            <div class=\"contact-info\">\r\n                <p><strong>Email:</strong> <a href=\"mailto:adithya.rk06@gmail.com\">adithya.rk06@gmail.com</a></p>\r\n                <p><strong>LinkedIn:</strong> <a href=\"https://www.linkedin.com/in/adithyarrajesh/\" target=\"_blank\">https://www.linkedin.com/in/adithyarrajesh</a></p>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Developer 3 -->\r\n        <div class=\"developer-section\">\r\n            <img src=\"https://media.licdn.com/dms/image/v2/D5603AQHaGbo6m4lUwA/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1691631777430?e=1738195200&v=beta&t=w6dZiL4x1Mp72aZCXOWHUhTbk6x4xKRJJLu3iSamQEE\" alt=\"Developer 3\">\r\n            <div class=\"developer-name\">Aishani Bal</div>\r\n            <div class=\"developer-position\">Front-End Developer</div>\r\n            <div class=\"developer-bio\"></div>\r\n            <div class=\"contact-info\">\r\n                <p><strong>Email:</strong> <a href=\"mailto:aishani.bal5@gmail.com\">aishani.bal5@gmail.com</a></p>\r\n                <p><strong>LinkedIn:</strong> <a href=\"https://www.linkedin.com/in/aishani-bal-685a04212/\" target=\"_blank\">https://www.linkedin.com/in/aishani-bal</a></p>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Developer 4 -->\r\n        <div class=\"developer-section\">\r\n            <img src=\"https://media.licdn.com/dms/image/v2/C4E03AQFAsN920588Ag/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1663645738240?e=1738195200&v=beta&t=im_KNbjruYPPUZVhzRajS-sUocZvdEAXC6Bk6dAnMUA\" alt=\"Developer 4\">\r\n            <div class=\"developer-name\">Eshan Jaffar</div>\r\n            <div class=\"developer-position\">Back-End Developer</div>\r\n            <div class=\"developer-bio\"></div>\r\n            <div class=\"contact-info\">\r\n                <p><strong>Email:</strong> <a href=\"mailto:eshan1jaffar@gmail.com\">eshan1jaffar@gmail.com</a></p>\r\n                <p><strong>LinkedIn:</strong> <a href=\"https://www.linkedin.com/in/eshan-jaffar-264859234/\" target=\"_blank\">https://www.linkedin.com/in/eshan-jaffar</a></p>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Developer 5 -->\r\n        <div class=\"developer-section\">\r\n            <img src=\"https://media.licdn.com/dms/image/v2/D4E03AQFIMjMNC-iJog/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1724957808652?e=1738195200&v=beta&t=WtI_Bfgf5MLM_9H_sRfY-0DOybrWZTjLTV48yNkSSWg\" alt=\"Developer 5\">\r\n            <div class=\"developer-name\">Megha Goddu</div>\r\n            <div class=\"developer-position\">Full Stack Developer</div>\r\n            <div class=\"developer-bio\"></div>\r\n            <div class=\"contact-info\">\r\n                <p><strong>Email:</strong> <a href=\"mailto:megha.goddu1@gmail.com\">megha.goddu1@gmail.com</a></p>\r\n                <p><strong>LinkedIn:</strong> <a href=\"https://www.linkedin.com/in/megha-goddu-0580a8228/\" target=\"_blank\">https://www.linkedin.com/in/megha-goddu</a></p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    </body>\r\n{% endblock %}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Api/templates/contact.html b/Api/templates/contact.html
--- a/Api/templates/contact.html	(revision 7dc37191b2a0ed5822185c481ee1ee6770fa5d9c)
+++ b/Api/templates/contact.html	(date 1733100594805)
@@ -229,13 +229,13 @@
     <form method="post">
         {% csrf_token %}
         <label for="name">Name:</label>
-        <input type="text" id="name" name="name" required><br><br>
+        <input placeholder="Name" type="text" id="name" name="name" required><br><br>
 
         <label for="email">Email:</label>
-        <input type="email" id="email" name="email" required><br><br>
+        <input placeholder="Email" type="email" id="email" name="email" required><br><br>
 
         <label for="message">Message:</label><br>
-        <textarea id="message" name="message" rows="5" required></textarea><br><br>
+        <textarea placeholder="Write your message here" id="message" name="message" rows="5" required></textarea><br><br>
 
         <button type="submit">Send</button>
     </form>
Index: Api/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\r\nfrom .models import Social\r\n# Register your models here.\r\nadmin.site.register(Social)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Api/admin.py b/Api/admin.py
--- a/Api/admin.py	(revision 7dc37191b2a0ed5822185c481ee1ee6770fa5d9c)
+++ b/Api/admin.py	(date 1733100594805)
@@ -1,4 +1,11 @@
 from django.contrib import admin
 from .models import Social
+from .models import ContactRequest
 # Register your models here.
-admin.site.register(Social)
\ No newline at end of file
+admin.site.register(Social)
+
+@admin.register(ContactRequest)
+class ContactRequestAdmin(admin.ModelAdmin):
+    list_display = ('name', 'email', 'submitted_at')
+    list_filter = ('submitted_at',)
+    search_fields = ('name', 'email')
\ No newline at end of file
Index: SpotifyWrapper/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for SpotifyWrapper project.\r\n\r\nGenerated by 'django-admin startproject' using Django 5.1.2.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/5.1/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/5.1/ref/settings/\r\n\"\"\"\r\n\r\nfrom pathlib import Path\r\n\r\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'django-insecure-56foi3ozk=_lx6v$^2bsk00r)n($-%ar@nm2@x8yy6idh%gm05'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = ['*']\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'rest_framework',\r\n    'Api.apps.ApiConfig',\r\n    'tailwind',\r\n    'theme',\r\n]\r\n\r\nTAILWIND_APP_NAME = 'theme'\r\n\r\n\r\nINTERNAL_IPS = [\r\n    \"127.0.0.1\",\r\n]\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'SpotifyWrapper.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [],\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'SpotifyWrapper.wsgi.application'\r\n\r\n\r\n#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\r\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\r\nEMAIL_HOST = 'smtp.gmail.com'\r\nEMAIL_PORT = 587\r\nEMAIL_USE_TLS = True\r\nEMAIL_HOST_USER = 'email'\r\nEMAIL_HOST_PASSWORD = 'password'  # or use environment variables for better security\r\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\r\n\r\nLOGIN_REDIRECT_URL = '/spotify/check-auth'\r\n\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        'NAME': BASE_DIR / \"db.sqlite3\",  # Stores the SQLite database in the project directory\r\n    }\r\n}\r\n\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_TZ = True\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\r\n\r\nSTATIC_URL = 'static/'\r\n\r\n# Default primary key field type\r\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\r\n\r\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SpotifyWrapper/settings.py b/SpotifyWrapper/settings.py
--- a/SpotifyWrapper/settings.py	(revision 7dc37191b2a0ed5822185c481ee1ee6770fa5d9c)
+++ b/SpotifyWrapper/settings.py	(date 1733100594821)
@@ -11,6 +11,8 @@
 """
 
 from pathlib import Path
+import ssl
+
 
 # Build paths inside the project like this: BASE_DIR / 'subdir'.
 BASE_DIR = Path(__file__).resolve().parent.parent
@@ -80,15 +82,10 @@
 
 WSGI_APPLICATION = 'SpotifyWrapper.wsgi.application'
 
+print(ssl.get_default_verify_paths())
+EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
 
-#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
-EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
-EMAIL_HOST = 'smtp.gmail.com'
-EMAIL_PORT = 587
-EMAIL_USE_TLS = True
-EMAIL_HOST_USER = 'email'
-EMAIL_HOST_PASSWORD = 'password'  # or use environment variables for better security
-DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
+
 
 LOGIN_REDIRECT_URL = '/spotify/check-auth'
 
@@ -129,12 +126,14 @@
 
 LANGUAGE_CODE = 'en-us'
 
-TIME_ZONE = 'UTC'
+TIME_ZONE = 'America/New_York'
 
-USE_I18N = True
-
+# Enable timezone support
 USE_TZ = True
 
+USE_I18N = True
+
+
 
 # Static files (CSS, JavaScript, Images)
 # https://docs.djangoproject.com/en/5.1/howto/static-files/
Index: Api/templates/login.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"base.html\" %}\r\n{% load static %}\r\n\r\n{% block title %}Login{% endblock %}\r\n\r\n{% block content %}\r\n    <link rel=\"stylesheet\" href=\"{% static 'css/login.css' %}\">\r\n<div class=\"login-content\">\r\n    <h2>Log in to your account</h2>\r\n    <form method=\"post\" class=\"login-form\">\r\n        {% csrf_token %}\r\n        <div class=\"form-fields\">\r\n            {{ form.as_p }}\r\n        </div>\r\n        <button type=\"submit\" class=\"login-button\">Log in</button>\r\n    </form>\r\n    <p class=\"text\">\r\n        Forgot your password? <a href=\"{% url 'password_reset' %}\" class=\"link\">Reset it here</a>\r\n    </p>\r\n    <p class=\"text\">\r\n        Don't have an account? <a href=\"{% url 'register' %}\" class=\"link\">Register here</a>\r\n    </p>\r\n</div>\r\n{% endblock %}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Api/templates/login.html b/Api/templates/login.html
--- a/Api/templates/login.html	(revision 7dc37191b2a0ed5822185c481ee1ee6770fa5d9c)
+++ b/Api/templates/login.html	(date 1733100594805)
@@ -15,9 +15,6 @@
         <button type="submit" class="login-button">Log in</button>
     </form>
     <p class="text">
-        Forgot your password? <a href="{% url 'password_reset' %}" class="link">Reset it here</a>
-    </p>
-    <p class="text">
         Don't have an account? <a href="{% url 'register' %}" class="link">Register here</a>
     </p>
 </div>
